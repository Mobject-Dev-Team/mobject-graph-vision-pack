<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_ITcVnContainer" Id="{48dfc53e-0fa0-08cf-2bc3-a7006e9bded6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _ITcVnContainer EXTENDS InterfaceDatatypeBase IMPLEMENTS I_InterfaceDatatype_ITcVnContainer
VAR
	localData : ITcVnContainer;
	activeData : REFERENCE TO ITcVnContainer REF= localData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{8c6e98db-55ee-0507-35f7-72cb1e08eeef}" />
    <Folder Name="Customize" Id="{7a7b4358-0bff-0ace-0340-3dd72f091245}">
      <Folder Name="Destructor" Id="{2af93322-152d-06ab-2691-33448865aaf7}" />
      <Folder Name="Private" Id="{06116da1-2e9a-0ab7-3a96-e1ad176f629d}" />
    </Folder>
    <Property Name="Address" Id="{0d1d9ecc-86c8-04cc-0061-b1800192f3b4}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{0116cfa6-1760-0b24-1330-c9d65411c492}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{f02d91a5-3953-01db-3aaf-64fff24e0f06}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{50051f1c-cf1b-0740-31dc-1c3a40b2888d}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _ITcVnContainer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_ITcVnContainer);
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{0bff7f28-4b52-0f66-31e1-0b438dd7c454}" FolderPath="Customize\Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

TryTcReleaseLocal();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasType" Id="{636986b0-0b9e-0d82-386a-8c775037e6c8}">
      <Declaration><![CDATA[METHOD PUBLIC HasType : BOOL
VAR_INPUT
	ContainerType : GUID;
END_VAR
VAR
    actualGuid : GUID;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
    RETURN;
END_IF

IF NOT SUCCEEDED(activeData.GetTypeGuid(actualGuid)) THEN
    RETURN;
END_IF

IF NOT (GuidsEqualByVal(ContainerType, actualGuid)) THEN
	RETURN;
END_IF

HasType := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Identifier" Id="{135f45ca-b070-0af5-3022-2a12c62aba78}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Identifier : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{8a9e5bb7-5e05-0f0c-1a1e-8404a38a582d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Identifier := 'ITcVnContainer';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsValid" Id="{27a67e55-918d-0ce2-3cf2-2ee0466159ef}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{bcc7a282-5e06-0f67-01da-f6a2f88ef258}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := activeData <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MakeReferenceTo" Id="{43bef498-17ae-0018-1c1f-8fb5f952e51c}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ITcVnContainer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_DINT" Id="{21396846-aafc-043b-04c3-1164cfdda6b7}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_DINT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _DINT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_DINT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_INT" Id="{7087243b-6909-08ea-23ab-6272205273ce}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_INT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _INT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_INT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_ITcVnImage" Id="{90f81a39-4834-0e76-1bc7-75a4fcf9850e}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_ITcVnImage
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _ITcVnImage;
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_ITcVnImage(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_LREAL" Id="{bcd1a734-dbfb-0e85-3d59-37e637f165fd}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_LREAL
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _LREAL(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_LREAL(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_REAL" Id="{cef14f3f-81a8-0342-3886-ffb7d717761a}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_REAL
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _REAL(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_REAL(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_SINT" Id="{7a7025b3-bd70-0951-1266-089245e63acd}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_SINT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _SINT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_SINT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_UDINT" Id="{2dc85cf1-8275-0cb9-1bcf-a7dac8a9b4c3}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_UDINT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _ULINT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_ULINT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_UINT" Id="{4eaa515a-1786-0429-0537-7f2ce4106e55}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_UINT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _UINT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_UINT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_ULINT" Id="{5fa600de-0d18-08b0-31b7-882e272d9841}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_ULINT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _ULINT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_ULINT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Serialize_ContainerType_Vector_USINT" Id="{7087c68b-c89e-095b-1862-f255159fd191}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PRIVATE Serialize_ContainerType_Vector_USINT
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	hr : HRESULT;
	_value : _USINT(0);
	elementCount : ULINT;
	i : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData.GetElementNum(elementCount);

FOR i := 0 TO elementCount - 1 DO 
	
	hr := F_VN_GetAt_USINT(activeData, _value.Value, i, S_OK);
	
	IF SUCCEEDED(hr) THEN
		Serializer.AddObject(_value);
	ELSE
		Serializer.AddNull();
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{8c39171b-b6bc-0e1b-005c-9497fee68eef}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	containerTypeName : _STRING('');
	containerTypeGuid : _GUID;
	elementTypeGuid : _GUID;
    elementNum : _ULINT(0);
    elementSize : _ULINT(0);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (activeData <> 0) THEN
	Serializer.AddNull();
	RETURN;
END_IF

activeData.GetTypeName(containerTypeName.Value,UDINT_TO_UINT(containerTypeName.Size));
activeData.GetTypeGuid(containerTypeGuid.Value);
activeData.GetElementTypeGuid(elementTypeGuid.Value);
activeData.GetElementNum(elementNum.Value);
activeData.GetElementSize(elementSize.Value);

Serializer.StartObject();
Serializer.AddKeyObject('containerTypeName', containerTypeName);
Serializer.AddKeyString('containerTypeGuid', containerTypeGuid.ToString());
Serializer.AddKeyString('elementTypeGuid', elementTypeGuid.ToString());
Serializer.AddKeyObject('elementNum', elementNum);
Serializer.AddKeyObject('elementSize', elementSize);
Serializer.AddKey('elements');
Serializer.StartArray();

IF containerTypeName.Value = 'CTcVnContainer_Vector_SINT' THEN
	Serialize_ContainerType_Vector_SINT(Serializer);		
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_USINT' THEN
	Serialize_ContainerType_Vector_USINT(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_INT' THEN
	Serialize_ContainerType_Vector_INT(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_UINT' THEN
	Serialize_ContainerType_Vector_UINT(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_DINT' THEN
	Serialize_ContainerType_Vector_DINT(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_UDINT' THEN
	Serialize_ContainerType_Vector_UDINT(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_ULINT' THEN
	Serialize_ContainerType_Vector_ULINT(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_REAL' THEN
	Serialize_ContainerType_Vector_REAL(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_LREAL' THEN
	Serialize_ContainerType_Vector_LREAL(Serializer);
ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_ITcVnImage' THEN
	Serialize_ContainerType_Vector_ITcVnImage(Serializer);
//ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_' THEN
//	Serialize_ContainerType_Vector_(Serializer);
//ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_' THEN
//	Serialize_ContainerType_Vector_(Serializer);
//ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_' THEN
//	Serialize_ContainerType_Vector_(Serializer);
//ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_' THEN
//	Serialize_ContainerType_Vector_(Serializer);
//ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_' THEN
//	Serialize_ContainerType_Vector_(Serializer);
//ELSIF containerTypeName.Value = 'CTcVnContainer_Vector_' THEN
//	Serialize_ContainerType_Vector_(Serializer);	
		
END_IF
Serializer.EndArray();
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{cb5b28c4-0220-08c3-1792-c22c57905b5d}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{ce11f86a-46dc-0215-1656-0a3c050f3ac5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryCheckIfBasicContainer" Id="{efb0d0d4-359f-025f-38bd-5366b73bd41c}">
      <Declaration><![CDATA[METHOD PUBLIC TryCheckIfBasicContainer : BOOL
VAR_INPUT
	Result : REFERENCE TO BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Result := FALSE;

IF NOT IsValid THEN
	RETURN;
END_IF

IF activeData.CheckIfBasicContainer() = S_OK THEN
    Result := TRUE;
END_IF

TryCheckIfBasicContainer := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCheckIfEmpty" Id="{edae55a9-08ee-0bf8-0882-d88f32bc282c}">
      <Declaration><![CDATA[METHOD PUBLIC TryCheckIfEmpty : BOOL
VAR_INPUT
	Result : REFERENCE TO BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Result := FALSE;

IF NOT IsValid THEN
	RETURN;
END_IF

IF activeData.CheckIfEmpty() = S_OK THEN
    Result := TRUE;
END_IF

TryCheckIfEmpty := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCopyContentFrom" Id="{6130f86b-d6bd-0a88-1ba0-51e0c0a096dc}">
      <Declaration><![CDATA[METHOD PUBLIC TryCopyContentFrom : BOOL
VAR_INPUT
	Source : I_InterfaceDatatype;
END_VAR
VAR
	ipSrcContainer : I_InterfaceDatatype_ITcVnContainer;
	hresult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __QUERYINTERFACE(Source, ipSrcContainer) THEN
	RETURN;
END_IF

hresult := F_VN_CopyContainer(
    ipSrcContainer := ipSrcContainer.Value,
	ipDestContainer := Value,
	hrPrev:= S_OK);
    
TryCopyContentFrom := SUCCEEDED(hresult);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{0b0f32ca-3c06-0d78-39fb-8c8d3ba75da5}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// not yet implemented.  This will just be a reverse of the serialization code.]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementNum" Id="{ea8ce650-b087-030c-1096-99ea42c934b8}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementNum : BOOL
VAR_INPUT
	Destination : REFERENCE TO ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
	RETURN;
END_IF

TryGetElementNum := SUCCEEDED(activeData.GetElementNum(Destination));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTypeName" Id="{1f9f0949-b4f8-0a9d-0079-cfde54baf053}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetTypeName : BOOL
VAR_INPUT
	Destination : REFERENCE TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsValid THEN
	RETURN;
END_IF

TryGetTypeName := SUCCEEDED(activeData.GetTypeName(Destination, 255));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{273ebff0-3c8f-09f4-18a3-7e76d9dfa55d}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO ITcVnContainer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryTcAddRef" Id="{e0280cff-c2e0-0e1b-1708-b4c46d31bb55}">
      <Declaration><![CDATA[METHOD PUBLIC TryTcAddRef : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF activeData = 0 THEN
	RETURN;
END_IF

IF activeData.TcAddRef() = 0 THEN
	activeData := 0;
END_IF

TryTcAddRef := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryTcRelease" Id="{7a72ac48-b41c-01c7-03fa-0a8ab7bb1948}">
      <Declaration><![CDATA[METHOD PUBLIC TryTcRelease : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF activeData = 0 THEN
	RETURN;
END_IF

IF activeData.TcRelease() = 0 THEN
	activeData := 0;
END_IF

TryTcRelease := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryTcReleaseLocal" Id="{f94c2f07-d62f-0071-30c3-d38625a0b28c}" FolderPath="Customize\Private\">
      <Declaration><![CDATA[METHOD PUBLIC TryTcReleaseLocal : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF localData = 0 THEN
	RETURN;
END_IF

IF localData.TcRelease() = 0 THEN
	localData := 0;
END_IF

TryTcReleaseLocal := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{416ebca8-5790-08c7-2a74-c6278fa1367b}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ITcVnContainer]]></Declaration>
      <Get Name="Get" Id="{9f4e4494-6e38-0cd9-1968-aee37a5d347b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value REF= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>