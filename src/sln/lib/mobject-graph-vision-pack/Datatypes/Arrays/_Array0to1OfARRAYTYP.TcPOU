<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_Array0to1OfARRAYTYP" Id="{da1db718-2dc7-0680-1f34-420f519f6963}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _Array0to1OfARRAYTYP EXTENDS ArrayDatatypeBase_1D
VAR CONSTANT
	lBound : DINT := 0;
	uBound : DINT := 1;
END_VAR
VAR
	localData : ARRAY [lBound..uBound] OF ARRAYTYP;
	activeData : REFERENCE TO ARRAY [lBound..uBound] OF ARRAYTYP REF= localData;
	elements : ARRAY [lBound..uBound] OF _ARRAYTYP();
	baseType : _ARRAYTYP();
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{c4cb8576-cf1d-0946-3fa1-f2ef8975a294}">
      <Folder Name="Constructor" Id="{df5cd284-b008-0bc8-0dad-59b77543a0b2}" />
      <Folder Name="Protected" Id="{4a2a0313-0345-01e8-1061-14e4e6130b08}" />
    </Folder>
    <Folder Name="Customize" Id="{f4f719dc-ac2c-0c9a-1b17-a2d5293b2885}" />
    <Property Name="Address" Id="{b94b5645-b77d-0b7d-1a71-9c410417c540}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{4f4e7c0d-051b-06c0-319a-9de1dd574318}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BaseDatatype" Id="{dd803863-6543-0bf5-2fa4-7d6a725a04d5}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC BaseDatatype : I_Datatype]]></Declaration>
      <Get Name="Get" Id="{f0da49d6-7190-03c5-3d31-6c2244ec3ad2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseDatatype := baseType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{5e6d9234-db9e-0b11-170f-002385f934b8}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{bf1ddbe4-ab69-08e1-233f-f6370d208424}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_());
pClone^.Value := Value;
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{2c8f3788-8091-0ec7-1f1d-17419ee2c04b}"
      FolderPath="Core\Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{7c2b7048-f4c9-00ff-1fdf-9dcc2ccfd7b9}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ARRAY [lBound..uBound] OF ARRAYTYP;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeArrayValues" Id="{d97eca47-6464-0360-3844-db5d72449ca9}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeArrayValues
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].SerializeWith(Serializer);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetElementReference" Id="{e613b052-6e8d-0706-34e0-28ea09dbbbd3}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetElementReference
VAR_INPUT
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].MakeReferenceTo(activeData[i]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{60de947f-b2c9-0cf3-1bb5-fd34bc6abd5f}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{e7a47bd3-532e-073c-2627-0983ec33e02f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeArrayValues" Id="{191d4680-d2d7-0cdd-3540-feb254aa39a2}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeArrayValues : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	enumerator : I_DeserializerArrayForwardEnumerator;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := Deserializer.GetArrayEnumerator();
i := lBound;

WHILE enumerator.MoveNext() AND i <= uBound DO
	
	IF NOT elements[i].TryDeserializeFrom(enumerator.Current, Feedback) THEN
		EXIT;
	END_IF
	i := i + 1;

END_WHILE
enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementAsDatatypeByIndex" Id="{e182acd4-e708-073b-3dc3-7a3da5faee1b}"
      FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementAsDatatypeByIndex : BOOL
VAR_INPUT
	Index : DINT;
	Destination : REFERENCE TO I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < lbound OR Index > ubound THEN
	RETURN;
END_IF

Destination := elements[Index];
TryGetElementAsDatatypeByIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLowerBound" Id="{0e4dcf45-0a4e-07e2-23ef-b3d97ee6d2ad}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetLowerBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := lBound;
	TryGetLowerBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUpperBound" Id="{14ad8601-491a-00c7-293b-81edde1c8fac}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetUpperBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := uBound;
	TryGetUpperBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{6f67bda1-c408-03ef-329e-41da75f8b779}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO ARRAY [lBound..uBound] OF ARRAYTYP;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetElementReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{77a980b9-8441-045c-318a-7fb13eb11607}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ARRAY [lBound..uBound] OF ARRAYTYP;]]></Declaration>
      <Get Name="Get" Id="{ca4d2820-0158-03df-1107-e7f1aa18ea05}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value ref= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>