<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_Array0to32OfUDINT" Id="{3a25e8bc-57e8-04a0-3006-77b511156476}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _Array0to32OfUDINT EXTENDS ArrayDatatypeBase_1D
VAR CONSTANT
	lBound : DINT := 0;
	uBound : DINT := 32;
END_VAR
VAR
	localData : ARRAY [lBound..uBound] OF UDINT;
	activeData : REFERENCE TO ARRAY [lBound..uBound] OF UDINT REF= localData;
	elements : ARRAY [lBound..uBound] OF _UDINT(0);
	baseType : _UDINT(0);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{f3e28a07-280e-026d-3aa2-da2976f51c90}">
      <Folder Name="Constructor" Id="{0bb832b3-a4ac-0a5b-0382-3f252783c526}" />
      <Folder Name="Protected" Id="{c2f3eda6-aa76-0c4d-3b7d-55b4244298c4}" />
    </Folder>
    <Folder Name="Customize" Id="{ba957410-ff19-0941-33d7-cd68da5243fb}" />
    <Property Name="Address" Id="{3e4cc700-d0b1-0320-2463-e4f1bb160863}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{718e6be8-2ecc-0c6e-0940-097fd10ccb05}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BaseDatatype" Id="{e25884f8-2806-0a49-1dab-c9ab4a46a672}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC BaseDatatype : I_Datatype]]></Declaration>
      <Get Name="Get" Id="{63d4d613-209e-0fdc-32a9-5673142e49c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseDatatype := baseType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{3eb592a7-1464-0f32-1803-5e402dc3753d}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{dee840a7-940d-022e-352c-27e681fcec91}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _Array0to32OfUDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_Array0to32OfUDINT());
pClone^.Value := Value;
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{a6b720c3-95af-057f-3549-0645ed25a03a}"
      FolderPath="Core\Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{0dfd8b5b-e499-071b-059a-77eaea430ae9}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ARRAY [lBound..uBound] OF UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeArrayValues" Id="{5087fe44-8e40-0a85-0785-d6dd08530470}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeArrayValues
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].SerializeWith(Serializer);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetElementReference" Id="{14e4a48c-49dc-083b-0cc3-c72266b58c1e}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetElementReference
VAR_INPUT
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].MakeReferenceTo(activeData[i]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{d2160c95-8d17-0a60-2c61-84edb392a0e4}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{840580b0-5959-095b-269a-db5ee5af100b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeArrayValues" Id="{8d62bbd5-171d-058a-00c7-8c9cd6289ccf}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeArrayValues : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	enumerator : I_DeserializerArrayForwardEnumerator;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := Deserializer.GetArrayEnumerator();
i := lBound;

WHILE enumerator.MoveNext() AND i <= uBound DO
	
	IF NOT elements[i].TryDeserializeFrom(enumerator.Current, Feedback) THEN
		EXIT;
	END_IF
	i := i + 1;

END_WHILE
enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementAsDatatypeByIndex" Id="{558c81bf-fc45-0351-0e51-400d092ac4ac}"
      FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementAsDatatypeByIndex : BOOL
VAR_INPUT
	Index : DINT;
	Destination : REFERENCE TO I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < lbound OR Index > ubound THEN
	RETURN;
END_IF

Destination := elements[Index];
TryGetElementAsDatatypeByIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLowerBound" Id="{48074ba1-fac4-0169-2785-cc52ebe23fc0}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetLowerBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := lBound;
	TryGetLowerBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUpperBound" Id="{e8657f91-d072-0e5a-35a5-a597d0ae00ef}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetUpperBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := uBound;
	TryGetUpperBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{de25f97f-442b-0df5-34ae-2fe88bcc4a94}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO ARRAY [lBound..uBound] OF UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetElementReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{84862818-f0e9-0836-3791-603a9fd8c2ef}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ARRAY [lBound..uBound] OF UDINT;]]></Declaration>
      <Get Name="Get" Id="{ea3d8341-b878-0489-1901-c293be6abcf9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value ref= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>