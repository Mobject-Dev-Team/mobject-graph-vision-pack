<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_Array0to1_0to2OfLREAL" Id="{40400d8d-6d3e-0c1e-2047-f11a2df81d8b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _Array0to1_0to2OfLREAL EXTENDS ArrayDatatypeBase_2D
VAR CONSTANT
	lBoundD1 : DINT := 0;
	uBoundD1 : DINT := 1;
	lBoundD2 : DINT := 0;
	uBoundD2 : DINT := 2;
END_VAR
VAR
	localData : ARRAY [lBoundD1..uBoundD1,lBoundD2..uBoundD2] OF LREAL;
	activeData : REFERENCE TO ARRAY [lBoundD1..uBoundD1,lBoundD2..uBoundD2] OF LREAL REF= localData;
	elements : ARRAY [lBoundD1..uBoundD1,lBoundD2..uBoundD2] OF _LREAL(0);
	baseType : _LREAL(0);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{cb72039a-94ca-0371-1a53-6c6825cfc48a}">
      <Folder Name="Constructor" Id="{94aed592-9aaa-0b2a-2c97-f818165e228c}" />
      <Folder Name="Protected" Id="{c5e238fe-da16-0c79-0f3d-4d373c68b22f}" />
    </Folder>
    <Folder Name="Customize" Id="{1dcb89e6-857a-0a47-26ca-74a0dbf2d11b}" />
    <Property Name="Address" Id="{e9d52955-d547-08f9-1509-44352ed363d1}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{fa19edcb-757a-0fcd-2cec-234bb48bdf10}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BaseDatatype" Id="{35b25512-cc97-05d9-3086-f7244926638d}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC BaseDatatype : I_Datatype]]></Declaration>
      <Get Name="Get" Id="{6c60d6ec-ef65-0154-0651-d44cbf521139}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseDatatype := baseType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{f570d9be-a488-0ec0-114f-8379def5a2a5}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{3868d822-b2b7-0ab9-3b7c-684e9f720acd}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _Array0to1_0to2OfLREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_Array0to1_0to2OfLREAL());
pClone^.Value := Value;
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{46074f1e-31f8-0c50-0aa8-f8b446f080f9}"
      FolderPath="Core\Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{d8527cf4-f374-06d1-350a-018ebd07c464}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ARRAY [lBoundD1..uBoundD1,lBoundD2..uBoundD2] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeArrayValues" Id="{b6a8fe45-84fc-05d8-0632-80bddb067e9f}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeArrayValues
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	i, j : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBoundD1 TO uBoundD1 DO
	Serializer.StartArray();
	FOR j := lBoundD2 TO uBoundD2 DO
		elements[i, j].SerializeWith(Serializer);
	END_FOR
	Serializer.EndArray();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetElementReference" Id="{9494028f-1681-0c8d-0cab-57fed60ce5bc}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetElementReference
VAR_INPUT
END_VAR
VAR
	i, j : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBoundD1 TO uBoundD1 DO
	FOR j := lBoundD2 TO uBoundD2 DO
		elements[i, j].MakeReferenceTo(activeData[i, j]);
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{257acf35-d759-0543-2d21-468760afbeb2}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{7af86de1-517c-044b-0952-8e69a162e2ec}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeArrayValues" Id="{5cd441bc-492c-0983-0c26-2946532fb07f}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeArrayValues : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	enumeratorD1 : I_DeserializerArrayForwardEnumerator;
	enumeratorD2 : I_DeserializerArrayForwardEnumerator;
	i, j : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumeratorD1 := Deserializer.GetArrayEnumerator();
i := lBoundD1;

WHILE enumeratorD1.MoveNext() AND i <= uBoundD1 DO
	
	enumeratorD2 := enumeratorD1.Current.GetArrayEnumerator();
	j := lBoundD2;
	
	WHILE enumeratorD2.MoveNext() AND j <= uBoundD2 DO
	
		IF NOT elements[i, j].TryDeserializeFrom(enumeratorD2.Current, Feedback) THEN
			EXIT;
		END_IF
		
		j := j + 1;
	
	END_WHILE
	enumeratorD2.Dispose();

	i := i + 1;

END_WHILE
enumeratorD1.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementAsDatatypeByIndex" Id="{e47bcbbb-08a4-06f2-2732-5319d2f8876c}"
      FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementAsDatatypeByIndex : BOOL
VAR_INPUT
	Index1 : DINT;
	Index2 : DINT;
	Destination : REFERENCE TO I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index1 < lboundD1 OR Index1 > uboundD1 THEN
	RETURN;
END_IF

IF Index2 < lboundD2 OR Index2 > uboundD2 THEN
	RETURN;
END_IF

Destination := elements[Index1, Index2];
TryGetElementAsDatatypeByIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLowerBound" Id="{ffc7e387-01c3-04cf-00d1-59e6069f82f3}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetLowerBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Dimention OF
	
	1:	Destination := lBoundD1;
		TryGetLowerBound := TRUE;
		RETURN;
	
	2:	Destination := lBoundD2;
		TryGetLowerBound := TRUE;
		RETURN;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUpperBound" Id="{6c8b9b94-8e1a-06f7-0c9a-94a3506c399d}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetUpperBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Dimention OF
	
	1:	Destination := uBoundD1;
		TryGetUpperBound := TRUE;
		RETURN;
	
	2:	Destination := uBoundD2;
		TryGetUpperBound := TRUE;
		RETURN;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{7a241338-f98a-0312-1bba-a6ce858fb6ee}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO ARRAY [lBoundD1..uBoundD1,lBoundD2..uBoundD2] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetElementReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{402000ab-8cae-06d3-34e7-d3fea713bc6d}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ARRAY [lBoundD1..uBoundD1,lBoundD2..uBoundD2] OF LREAL;]]></Declaration>
      <Get Name="Get" Id="{c96731cd-556f-0f88-045b-cfbeca9881a9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value ref= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>