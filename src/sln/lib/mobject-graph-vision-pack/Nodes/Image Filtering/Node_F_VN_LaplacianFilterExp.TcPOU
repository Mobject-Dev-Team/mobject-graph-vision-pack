<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_LaplacianFilterExp" Id="{446cb991-68fb-41e6-a868-2c3c019afe54}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_LaplacianFilterExp EXTENDS VisionNode
VAR
	ipSrcImage : _ITcVnImage;
    ipDestImage : _ITcVnImage;
    eDestDepth : _ETcVnElementType(ETcVnElementType.TCVN_ET_SAME_AS_SOURCE);
    nKernelSize : _UDINT(1);
    fScale : _LREAL(1.0);
    fDelta : _LREAL(0.0);
    eBorderType : _ETcVnBorderInterpolationMethod(ETcVnBorderInterpolationMethod.TCVN_BIM_DEFAULT);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{00bebbbd-247b-4397-9807-49a41c66aec0}" />
    <Method Name="Clone" Id="{642ad6b2-6e7a-4a02-8975-6cf435bf9f72}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_LaplacianFilterExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_LaplacianFilterExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{0e487294-c8f6-44f9-9cbd-f5c7affc7b67}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('eDestDepth', eDestDepth);
AddParameter('nKernelSize', nKernelSize);
AddParameter('fScale', fScale);
AddParameter('fDelta', fDelta);
AddParameter('eBorderType', eBorderType);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{313af0d8-1c42-4059-9e9a-3f4de55e9f5c}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_LaplacianFilterExp(
	ipSrcImage := ipSrcImage.Value,
	ipDestImage := ipDestImage.Value,
	eDestDepth := eDestDepth.Value,
    nKernelSize := nKernelSize.Value,
    fScale := fScale.Value,
    fDelta := fDelta.Value,
    eBorderType := eBorderType.Value,
	hrPrev := hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{dc2ca039-5a6e-4ed1-9d39-854a7dd27b0b}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
	compatibleElementTypes_USINT : ARRAY [0..0] OF ETcVnElementType := [
		ETcVnElementType.TCVN_ET_USINT];
	
	compatibleElementTypes_UINT : ARRAY [0..1] OF ETcVnElementType := [
		ETcVnElementType.TCVN_ET_USINT,
		ETcVnElementType.TCVN_ET_UINT];
	
	compatibleElementTypes_INT : ARRAY [0..1] OF ETcVnElementType := [
		ETcVnElementType.TCVN_ET_USINT,
		ETcVnElementType.TCVN_ET_INT];
	
	compatibleElementTypes_REAL : ARRAY [0..3] OF ETcVnElementType := [
		ETcVnElementType.TCVN_ET_USINT,
		ETcVnElementType.TCVN_ET_UINT,
		ETcVnElementType.TCVN_ET_INT,
		ETcVnElementType.TCVN_ET_REAL];
	
	compatibleElementTypes_LREAL : ARRAY [0..3] OF ETcVnElementType := [
		ETcVnElementType.TCVN_ET_USINT,
		ETcVnElementType.TCVN_ET_UINT,
		ETcVnElementType.TCVN_ET_INT,
		ETcVnElementType.TCVN_ET_LREAL];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');

//The input image ipSrcImage may be in any available format, except for the data types SINT and DINT, which are generally not supported.

//Only the same or a larger data type than that of the input image can be used as the result depth, otherwise data would be lost.
//For example, a UINT cannot be converted to a USINT. 
//Furthermore, there are two restrictions, so that a UINT cannot be converted into an INT and a REAL cannot be converted into an LREAL.

CASE eDestDepth.Value OF
    ETcVnElementType.TCVN_ET_SINT,
    ETcVnElementType.TCVN_ET_DINT:
	    Check.Fail('ipSrcImage has unsupported pixel depth');
		RETURN;
        
	ETcVnElementType.TCVN_ET_USINT:
        Check.IsTrue(ImageHasCompatibleElementType(ipSrcImage.Value, compatibleElementTypes_USINT), 'ipSrcImage has incompatible pixel depth');
	
	ETcVnElementType.TCVN_ET_UINT:
	    Check.IsTrue(ImageHasCompatibleElementType(ipSrcImage.Value, compatibleElementTypes_UINT), 'ipSrcImage has incompatible pixel depth');
		
	ETcVnElementType.TCVN_ET_INT:
	    Check.IsTrue(ImageHasCompatibleElementType(ipSrcImage.Value, compatibleElementTypes_INT), 'ipSrcImage has incompatible pixel depth');
	
	ETcVnElementType.TCVN_ET_REAL:
	    Check.IsTrue(ImageHasCompatibleElementType(ipSrcImage.Value, compatibleElementTypes_REAL), 'ipSrcImage has incompatible pixel depth');
	
	ETcVnElementType.TCVN_ET_LREAL:
	    Check.IsTrue(ImageHasCompatibleElementType(ipSrcImage.Value, compatibleElementTypes_LREAL), 'ipSrcImage has incompatible pixel depth');
END_CASE

Check.IsTrue(nKernelSize.IsOdd, 'nKernelSize must be an odd number');
Check.IsTrue((nKernelSize.Value >= 1) AND (nKernelSize.Value <= 31), 'nKernelSize must be between 1 and 31');]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>