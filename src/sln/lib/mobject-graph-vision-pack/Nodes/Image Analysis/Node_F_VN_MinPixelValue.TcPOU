<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_MinPixelValue" Id="{708ae608-3bf7-0087-37ce-678fa58c4aa2}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_MinPixelValue EXTENDS VisionNode
VAR
    ipImage : _ITcVnImage;
    aMinValue : _TcVnVector4_LREAL;
    aPosition : _TcVnPoint2_DINT;
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{7225d6db-db80-068d-0ecb-41fe8447860f}" />
    <Method Name="Clone" Id="{0448e3e9-6c2b-025a-3354-3987e1ff6579}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_MinPixelValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_MinPixelValue);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3859c76a-01b6-013b-14a9-9387c72ea9ff}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipImage', ipImage);
AddInput('hrPrev', hrPrev);
AddOutput('aMinValue', aMinValue);
AddOutput('aPosition', aPosition);
AddOutput('hresult', hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{0af785ee-15c0-0a65-2c70-91e34b17cb25}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_MinPixelValue(
	ipImage := ipImage.Value,
    aMinValue := aMinValue.Value,
    aPosition := aPosition.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{d1523d9e-3707-0322-38eb-d1921ccce0ce}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipImage.IsValid, 'ipImage must contain an image');
Check.IsTrue((ipImage.HasChannelCount(1) OR
              ipImage.HasChannelCount(2) OR
              ipImage.HasChannelCount(3) OR
              ipImage.HasChannelCount(4)), 'ipImage must contain 1, 2, 3 or 4 channels');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>