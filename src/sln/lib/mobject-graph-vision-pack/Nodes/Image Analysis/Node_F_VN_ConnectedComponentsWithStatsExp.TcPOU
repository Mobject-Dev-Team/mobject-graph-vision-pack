<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="Node_F_VN_ConnectedComponentsWithStatsExp" Id="{64bbfe25-5095-04e4-2acd-afceaaef3e31}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_ConnectedComponentsWithStatsExp EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    ipLabelImage : _ITcVnImage;
    ipBoundingBoxes : _ITcVnContainer;
    ipNumPixels : _ITcVnContainer;
    ipCentroids : _ITcVnContainer;
    nLabels : _DINT(0);
    eConnectivity : _ETcVnPixelConnectivity(ETcVnPixelConnectivity.TCVN_PC_4);
    eLabelType : _ETcVnElementType(ETcVnElementType.TCVN_ET_DINT);
    eAlgorithm : _ETcVnConnectedComponentsAlgorithm(ETcVnConnectedComponentsAlgorithm.TCVN_CCA_WU);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{e13b5330-07c6-0d36-2d3e-1a0ddbacba27}" />
    <Method Name="Clone" Id="{4d31e326-486e-0445-172c-b57b0532dd75}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_ConnectedComponentsWithStatsExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_ConnectedComponentsWithStatsExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{dba99416-d0aa-08f4-2521-881a8ec541e5}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('eConnectivity', eConnectivity);
AddParameter('eLabelType', eLabelType);
AddParameter('eAlgorithm', eAlgorithm);
AddInput('hrPrev', hrPrev);
AddOutput('ipLabelImage', ipLabelImage);
AddOutput('nLabels', nLabels);
AddOutput('hresult', hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{187fde92-2ca9-0a09-3cf6-643be711da57}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_ConnectedComponentsWithStatsExp(
	ipSrcImage := ipSrcImage.Value,
    ipLabelImage := ipLabelImage.Value,
    ipBoundingBoxes := ipBoundingBoxes.Value,
    ipNumPixels := ipNumPixels.Value,
    ipCentroids := ipCentroids.Value,
    nLabels := nLabels.Value,
    eConnectivity := eConnectivity.Value,
    eLabelType := eLabelType.Value,
    eAlgorithm := eAlgorithm.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{7af31468-7b8b-0cda-2d80-c65332ff4919}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(ipSrcImage.IsPixelDepth(8), 'ipSrcImage must be 8 bit pixel depth');
Check.IsTrue(ipSrcImage.HasChannelCount(1), 'ipSrcImage must contain 1 channel');
Check.IsTrue((eLabelType.Value = ETcVnElementType.TCVN_ET_DINT) OR
             (eLabelType.Value = ETcVnElementType.TCVN_ET_UINT), 'eLabelType must be DINT or UINT');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>