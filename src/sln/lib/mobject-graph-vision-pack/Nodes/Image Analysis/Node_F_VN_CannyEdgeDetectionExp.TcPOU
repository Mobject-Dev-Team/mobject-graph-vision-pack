<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_CannyEdgeDetectionExp" Id="{c810a538-c36e-04f4-20d5-baeac3346e34}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_CannyEdgeDetectionExp EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    ipDestImage : _ITcVnImage;
    fThresholdLow : _LREAL(0.0);
    fThresholdHigh : _LREAL(0.0);
    nApertureSize : _UDINT(3);
    bL2Gradient : _BOOL(FALSE);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{2395a783-9923-09dd-0f84-158229453d8a}" />
    <Method Name="Clone" Id="{27e1af76-33d2-0fd2-3e83-5ca1fd03cb9b}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_CannyEdgeDetectionExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_CannyEdgeDetectionExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3803e163-725b-0203-0d14-b83d987a3e7a}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('fThresholdLow', fThresholdLow);
AddParameter('fThresholdHigh', fThresholdHigh);
AddParameter('nApertureSize', nApertureSize);
AddParameter('bL2Gradient', bL2Gradient);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult', hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{c4777bd8-4a9d-0743-2f5c-1ee5bae33c33}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_CannyEdgeDetectionExp(
	ipSrcImage := ipSrcImage.Value,
    ipDestImage := ipDestImage.Value,
    fThresholdLow := fThresholdLow.Value,
    fThresholdHigh := fThresholdHigh.Value,
    nApertureSize := nApertureSize.Value,
    bL2Gradient := bL2Gradient.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{5c198c81-46c0-0a5b-041b-975fe9e4ba0b}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(ipSrcImage.IsPixelDepth(8), 'ipSrcImage must have 8 bit pixel depth');
Check.IsTrue(nApertureSize.Value >= 3, 'nApertureSize must be greater than or equal to 3');
Check.IsTrue(nApertureSize.IsOdd, 'nApertureSize must be an odd number');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>