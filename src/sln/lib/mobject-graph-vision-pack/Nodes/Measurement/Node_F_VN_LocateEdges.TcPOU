<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_LocateEdges" Id="{9b9932d8-46d2-033d-1562-615e0a37c130}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_LocateEdges EXTENDS VisionNode
VAR
	ipSrcImage : _ITcVnImage;
    ipEdgePoints : _ITcVnContainer;
    aStartPoint : _TcVnPoint2_REAL;
    aEndPoint : _TcVnPoint2_REAL;
    nNumEdges : _UDINT(0);
	eEdgeDirection : _ETcVnEdgeDirection(ETcVnEdgeDirection.TCVN_ED_DARK_TO_LIGHT);
    bAlternateDirection : _BOOL(FALSE);
    fMinStrength : _REAL(0.0);
    nSearchLines : _UDINT(1);
    hrPrev : _HRESULT(S_OK);
    fAvgStrength : _REAL(0.0);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{02c50a26-c08b-04c2-005b-1ab263685286}" />
    <Method Name="Clone" Id="{431c21b6-ca67-057e-15a2-0f466507243b}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_LocateEdges;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_LocateEdges);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{407891a7-66f6-0958-36fd-4f7a4f509719}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddInput('aStartPoint', aStartPoint);
AddInput('aEndPoint', aEndPoint);
AddParameter('nNumEdges', nNumEdges);
AddParameter('eEdgeDirection', eEdgeDirection);
AddParameter('bAlternateDirection', bAlternateDirection);
AddParameter('fMinStrength', fMinStrength);
AddParameter('nSearchLines', nSearchLines);
AddInput('hrPrev', hrPrev);
AddOutput('ipEdgePoints', ipEdgePoints);
AddOutput('fAvgStrength', fAvgStrength);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{6f94ef24-40d7-03b0-1f76-94fbe57437ea}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
VAR
    avgStrength : REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_LocateEdges(
	ipSrcImage := ipSrcImage.Value,
	ipEdgePoints := ipEdgePoints.Value,
    aStartPoint := aStartPoint.Value,
    aEndPoint := aEndPoint.Value,
    nNumEdges := nNumEdges.Value,
    eEdgeDirection := eEdgeDirection.Value,
    bAlternateDirection := bAlternateDirection.Value,
	fMinStrength := fMinStrength.Value,
	nSearchLines := nSearchLines.Value,
	hrPrev := hrPrev.Value,
    fAvgStrength => avgStrength);
    
fAvgStrength.Value := avgStrength;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{66cc19c2-88b3-086b-1555-2eb405e70860}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(ipSrcImage.HasChannelCount(1), 'ipSrcImage must contain 1 channel');
Check.IsTrue(nSearchLines.IsOdd, 'nSearchLines must be an odd number');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>