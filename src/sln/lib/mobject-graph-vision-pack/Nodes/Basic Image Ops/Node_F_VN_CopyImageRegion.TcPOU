<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_CopyImageRegion" Id="{3913b597-9a3d-05ae-12d2-f4130cf22aa3}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_CopyImageRegion EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    nX : _UDINT(0);
    nY : _UDINT(0);
    nWidth : _UDINT(0);
    nHeight : _UDINT(0);
    ipDestImage : _ITcVnImage;
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{3fd92de6-ad66-0228-2561-05fc12cd24b3}" />
    <Method Name="Clone" Id="{4e7778e7-3373-029f-181a-e6d0ea716c06}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_CopyImageRegion;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_CopyImageRegion);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{9d71f25b-eb0d-0bbf-2763-946e401da16c}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddOutput('ipSrcImage', ipSrcImage);
AddParameter('nX', nX);
AddParameter('nY', nY);
AddParameter('nWidth', nWidth);
AddParameter('nHeight', nHeight);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{203183f2-3fd1-0193-11d4-287d319fe5e8}">
      <Declaration><![CDATA[METHOD PROTECTED  OnExecute : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_CopyImageRegion(
    ipSrcImage := ipSrcImage.Value,
    nX := nX.Value,
    nY := nY.Value,
    nWidth := nWidth.Value,
	nHeight := nHeight.Value,
	ipDestImage := ipDestImage.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{44cb1f7c-dc6d-0918-02e3-cc4edc9ca6a6}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
    imageWidth : UDINT;
    imageHeight : UDINT;
    roiRectangle : TcVnRectangle_UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');

IF Check.Failed THEN
    RETURN;
END_IF

ipSrcImage.Value.GetWidth(imageWidth);
ipSrcImage.Value.GetHeight(imageHeight);
roiRectangle.nX := nX.Value;
roiRectangle.nY := nY.Value;
roiRectangle.nWidth := nWidth.Value;
roiRectangle.nHeight := nHeight.Value;

Check.IsTrue((roiRectangle.nWidth <= imageWidth), 'ROI width must not be greater than image width');
Check.IsTrue((roiRectangle.nWidth <= (imageWidth - roiRectangle.nX)), 'ROI too wide to fit within image');
Check.IsTrue((roiRectangle.nHeight <= imageHeight), 'ROI height must not be greater than image height');
Check.IsTrue((roiRectangle.nHeight <= (imageHeight - roiRectangle.nY)), 'ROI too high to fit within image');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>