<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_CopyImageRegionToRegion" Id="{f489fba3-84cc-0a99-011b-1982deb785d1}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_CopyImageRegionToRegion EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    nXSrc : _UDINT(0);
    nYSrc : _UDINT(0);
    nWidth : _UDINT(0);
    nHeight : _UDINT(0);
    ipDestImage : _ITcVnImage;
    nXDest : _UDINT(0);
    nYDest : _UDINT(0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{d0d5350d-1bba-0246-2baa-ed6cb9ef2427}" />
    <Method Name="Clone" Id="{cd478fa8-7593-0178-0ee2-cac68c8bf3e9}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_CopyImageRegionToRegion;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_CopyImageRegionToRegion);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c65850fd-8026-0e6d-1c54-1ad63fa2bcee}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('nXSrc', nXSrc);
AddParameter('nYSrc', nYSrc);
AddParameter('nWidth', nWidth);
AddParameter('nHeight', nHeight);
AddInput('ipDestImage', ipDestImage);
AddParameter('nXDest', nXDest);
AddParameter('nYDest', nYDest);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{b713ba37-902c-0180-1786-15d645ff07f4}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_CopyImageRegionToRegion(
    ipSrcImage := ipSrcImage.Value,
    nXSrc := nXSrc.Value,
    nYSrc := nYSrc.Value,
    nWidth := nWidth.Value,
	nHeight := nHeight.Value,
	ipDestImage := ipDestImage.Value,
    nXDest := nXDest.Value,
    nYDest := nYDest.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{3deb0bb7-d1c8-0eca-2ff6-fb5f65ff5f5c}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
    imgWidth : UDINT;
    imgHeight : UDINT;
    roiRectangle : TcVnRectangle_UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');

IF Check.Failed THEN
    RETURN;
END_IF

ipSrcImage.Value.GetWidth(imgWidth);
ipSrcImage.Value.GetHeight(imgHeight);
roiRectangle.nX := nXSrc.Value;
roiRectangle.nY := nYSrc.Value;
roiRectangle.nWidth := nWidth.Value;
roiRectangle.nHeight := nHeight.Value;

Check.IsTrue(IsRoiSizeOK(roiRectangle, imgWidth, imgHeight), 'ROI must fit within ipSrcImage');

//TODO Check nXDist and nYDest values?
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>