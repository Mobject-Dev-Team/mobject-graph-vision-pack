<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_ContourConvexity" Id="{a115bd26-6cba-042e-1259-1f3306e0beaf}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_ContourConvexity EXTENDS VisionNode
VAR
    ipContour : _ITcVnContainer;
    fConvexity : _LREAL(0.0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{b8b1dde1-98cb-0164-1b5b-3e75b76d495e}" />
    <Method Name="Clone" Id="{cffedb79-ebf7-0acc-3d24-8c4fecec48d7}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_ContourConvexity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_ContourConvexity);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{a7294b78-750c-0159-3cee-997198cfed8c}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipContour', ipContour);
AddInput('hrPrev', hrPrev);
AddOutput('fConvexity', fConvexity);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{52f4481d-efdf-0e39-0813-3a6386abf50c}">
      <Declaration><![CDATA[METHOD PROTECTED  OnExecute : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_ContourConvexity(
	ipContour := ipContour.Value,
    fConvexity := fConvexity.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{57c8518b-6120-0c91-234c-379e3a6a23bd}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipContour.IsValid, 'ipContour must be a valid container');
Check.IsTrue((ipContour.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_DINT) OR
              ipContour.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_REAL)),
              'ipContour contains incorrect type');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>