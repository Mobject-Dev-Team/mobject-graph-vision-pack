<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_AdaptiveThresholdExp" Id="{e8b1ee98-bc32-0534-3ca0-fdc44354a938}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_AdaptiveThresholdExp EXTENDS VisionNode
VAR
	ipSrcImage : _ITcVnImage;
    ipDestImage : _ITcVnImage;
    fMaxValue : _LREAL(0.0);
    eAdaptiveMethod : _ETcVnAdaptiveThresholdMethod(ETcVnAdaptiveThresholdMethod.TCVN_ATM_MEAN);
    eThresholdType : _ETcVnThresholdType(ETcVnThresholdType.TCVN_TT_BINARY);
    nBlockSize : _UDINT(3);
    fConstant : _LREAL(0.0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{3c0d8791-cfc2-036a-3c5a-9e436376a37b}" />
    <Method Name="Clone" Id="{82244fc8-41f7-0967-03b5-7ac73daf547a}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_AdaptiveThresholdExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_AdaptiveThresholdExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{359e6d43-5fc2-0abf-06df-8008bf5614a8}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('fMaxValue', fMaxValue);
AddParameter('eAdaptiveMethod', eAdaptiveMethod);
AddParameter('eThresholdType', eThresholdType);
AddParameter('nBlockSize', nBlockSize);
AddParameter('fConstant', fConstant);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{1ae7fb7e-7f50-0d8d-0e71-8714729f2a75}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_AdaptiveThresholdExp(
	ipSrcImage := ipSrcImage.Value,
	ipDestImage := ipDestImage.Value,
    fMaxValue := fMaxValue.Value,
    eAdaptiveMethod := eAdaptiveMethod.Value,
    eThresholdType := eThresholdType.Value,
    nBlockSize := nBlockSize.Value,
    fConstant := fConstant.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{4f0d3236-3b5c-0b3b-19b7-c8d666326a63}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(ipSrcImage.HasChannelCount(1), 'ipSrcImage must have 1 channel');
Check.IsTrue(ipSrcImage.IsPixelDepth(8), 'ipSrcImage must have 8 bit pixel depth');
Check.IsTrue((fMaxValue.Value >= 0.0), 'fMaxValue must be greater than or equal to 0');
Check.IsTrue((fMaxValue.Value <= 255.0), 'fMaxValue must be less than or equal to 255');
Check.IsTrue((eThresholdType.Value = ETcVnThresholdType.TCVN_TT_BINARY OR 
              eThresholdType.Value = ETcVnThresholdType.TCVN_TT_BINARY_INV), 'eThresholdType must be TCVN_TT_BINARY or TCVN_TT_BINARY_INV');
Check.IsTrue(nBlockSize.Value >= 3, 'nBlockSize must be greater than or equal to 3');
Check.IsTrue(nBlockSize.IsOdd, 'nBlockSize must be an odd number');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>