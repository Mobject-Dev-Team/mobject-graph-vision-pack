<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="Node_F_VN_GradeDataMatrixCodeExp" Id="{9d76278d-4caa-4bdb-b640-a6bd57b9b7fd}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_GradeDataMatrixCodeExp EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    ipDecodedData : _ITcVnContainer;
    stCodeGrades : 	_TcVnCodeGradesDM;
    fModuleWidth : _REAL(4.0);
    ipResultVisualization : _ITcVnImage;
    ipMarginGrades : _ITcVnContainer;
    ipContour : _ITcVnContainer;
    fAngleDeg : _REAL(0.0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{43411884-1733-46d6-9da6-b8acb3a38610}" />
    <Method Name="Clone" Id="{f1055dcd-431a-42e8-94ae-def494ab7b59}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_GradeDataMatrixCodeExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_GradeDataMatrixCodeExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{a96a43d0-08a9-449c-be29-0eefcd3da480}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('fModuleWidth', fModuleWidth);
AddInput('hrPrev', hrPrev);
AddOutput('ipDecodedData', ipDecodedData);
AddOutput('stCodeGrades', stCodeGrades);
AddOutput('ipResultVisualization', ipResultVisualization);
AddOutput('ipMarginGrades', ipMarginGrades);
AddOutput('ipContour', ipContour);
AddOutput('fAngleDeg', fAngleDeg);
AddOutput('hresult', hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{def5436d-d124-43e5-a8e1-0a05d80d32e2}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
VAR
    angle : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_GradeDataMatrixCodeExp(
	ipSrcImage := ipSrcImage.Value,
    ipDecodedData := ipDecodedData.Value,
    stCodeGrades := stCodeGrades.Value,
    fModuleWidth := fModuleWidth.Value,
    ipResultVisualization := ipResultVisualization.Value,
    ipMarginGrades := ipMarginGrades.Value,
    ipContour := ipContour.Value,
	hrPrev:= hrPrev.Value,
    fAngleDeg => angle);

fAngleDeg.Value := angle;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{362fb0de-2b7a-4a8d-ab97-cb9c4606a684}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(ipSrcImage.HasChannelCount(1), 'ipSrcImage must have 1 channel');
Check.IsTrue(ipSrcImage.IsPixelDepth(8), 'ipSrcImage must have 8 bit pixel depth');
Check.IsTrue(fModuleWidth.Value >= 3, 'fModuleWidth must be greater than or equal to 3');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>