<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="Node_F_VN_GradeBarcodeExp" Id="{528e42a3-94e3-44ec-84f5-294a174c03ee}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_GradeBarcodeExp EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    ipDecodedData : _ITcVnContainer;
    stCodeGrades : 	_TcVnCodeGrades1D;
    eBarcodeType : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_ANY);
    eSearchDirection : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    ipResultVisualization : _ITcVnImage;
    ipScanLineInfo : _ITcVnContainer;
    ipContour : _ITcVnContainer;
    fAngleDeg : _REAL(0.0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{6305b39c-8540-44dc-9003-434386f27d90}" />
    <Method Name="Clone" Id="{223c19be-c828-460c-9bfe-27fa2235adfe}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_GradeBarcodeExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_GradeBarcodeExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ec498580-3a9d-41f8-9c7a-080b5065c1eb}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('eBarcodeType', eBarcodeType);
AddParameter('eSearchDirection', eSearchDirection);
AddInput('hrPrev', hrPrev);
AddOutput('ipDecodedData', ipDecodedData);
AddOutput('stCodeGrades', stCodeGrades);
AddOutput('ipResultVisualization', ipResultVisualization);
AddOutput('ipScanLineInfo', ipScanLineInfo);
AddOutput('ipContour', ipContour);
AddOutput('fAngleDeg', fAngleDeg);
AddOutput('hresult', hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{21214d44-6d83-4198-935d-c1362cbff45f}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
VAR
    angle : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_GradeBarcodeExp(
	ipSrcImage := ipSrcImage.Value,
    ipDecodedData := ipDecodedData.Value,
    stCodeGrades := stCodeGrades.Value,
    eBarcodeType := eBarcodeType.Value,
    eSearchDirection := eSearchDirection.Value,
    ipResultVisualization := ipResultVisualization.Value,
    ipScanLineInfo := ipScanLineInfo.Value,
    ipContour := ipContour.Value,
	hrPrev:= hrPrev.Value,
    fAngleDeg => angle);

fAngleDeg.Value := angle;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{e4c75e19-b6a3-49ef-aab9-7d0db9d74fc2}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
    barcodeTypeIsValid : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(ipSrcImage.HasChannelCount(1), 'ipSrcImage must have 1 channel');
Check.IsTrue(ipSrcImage.IsPixelDepth(8), 'ipSrcImage must have 8 bit pixel depth');

CASE eBarcodeType.Value OF
    ETcVnBarcodeType.TCVN_BT_CODE39,
    ETcVnBarcodeType.TCVN_BT_CODE128,
    ETcVnBarcodeType.TCVN_BT_EAN8,
    ETcVnBarcodeType.TCVN_BT_EAN13,
    ETcVnBarcodeType.TCVN_BT_ITF,
    ETcVnBarcodeType.TCVN_BT_UPCA,
    ETcVnBarcodeType.TCVN_BT_UPCE :
        barcodeTypeIsValid := TRUE;
END_CASE

Check.IsTrue(barcodeTypeIsValid, 'eBarcodeType must have supported type');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>