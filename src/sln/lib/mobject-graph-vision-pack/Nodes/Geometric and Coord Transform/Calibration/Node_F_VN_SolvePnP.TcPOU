<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="Node_F_VN_SolvePnP" Id="{32731d22-3fe8-0cc3-28bd-cf5e63760cb3}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_SolvePnP EXTENDS VisionNode
VAR
    ipImagePoints : _ITcVnContainer;
    ipReferencePoints : _ITcVnContainer;
    aCameraMatrix : _TcVnMatrix3x3_LREAL;
    aDistortionCoefficients : _TcVnArray8_LREAL;
    aRotationMatrix : _TcVnMatrix3x3_LREAL;
    aTranslationVector : _TcVnVector3_LREAL;
    fReprojError : _LREAL(0.0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{0cc4ab66-8aaa-0086-2991-2dbe1fd50130}" />
    <Method Name="Clone" Id="{9872486f-fb5f-0e09-1e81-b79bea4f9873}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_SolvePnP;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_SolvePnP);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3131bc4e-2ebc-0cdc-2363-47df7c16b0b6}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipImagePoints', ipImagePoints);
AddInput('ipReferencePoints', ipReferencePoints);
AddInput('hrPrev', hrPrev);
AddOutput('aCameraMatrix', aCameraMatrix);
AddOutput('aDistortionCoefficients', aDistortionCoefficients);
AddOutput('aRotationMatrix', aRotationMatrix);
AddOutput('aTranslationVector', aTranslationVector);
AddOutput('fReprojError', fReprojError);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{92043a16-aefa-0076-2027-bb16f4656313}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_SolvePnP(
    ipImagePoints := ipImagePoints.Value,
    ipReferencePoints := ipReferencePoints.Value,
    aCameraMatrix := aCameraMatrix.Value,
    aDistortionCoefficients := aDistortionCoefficients.Value,
    aRotationMatrix := aRotationMatrix.Value,
    aTranslationVector := aTranslationVector.Value,
    fReprojError := fReprojError.Value,
	hrPrev := hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{0398ec3a-decb-0f44-3627-4433cc75b078}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
    imagePointsElementNum : ULINT;
    referencePointsElementNum : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipImagePoints.IsValid, 'ipImagePoints must be a valid container');
Check.IsTrue(ipImagePoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_REAL), 'ipImagePoints contains incorrect type');
Check.IsTrue((ipImagePoints.TryGetElementNum(imagePointsElementNum) AND (imagePointsElementNum >= 4)), 'ipImagePoints must contain at least 4 points');

Check.IsTrue(ipReferencePoints.IsValid, 'ipReferencePoints must be a valid container');
Check.IsTrue(ipReferencePoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint3_REAL), 'ipImagePoints contains incorrect type');
Check.IsTrue((ipImagePoints.TryGetElementNum(referencePointsElementNum) AND (referencePointsElementNum = imagePointsElementNum)), 'ipReferencePoints must have same number of points as ipImagePoints');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>