<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_Homography" Id="{84a44163-3100-0b19-0572-d0bf554207ed}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_Homography EXTENDS VisionNode
VAR
	ipSrcPoints : _ITcVnContainer;
    ipDestPoints : _ITcVnContainer;
    aPerspectiveTransform : _TcVnMatrix3x3_LREAL;
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{26170141-6e3a-0cc3-2457-4dcfd98f656f}" />
    <Method Name="Clone" Id="{6ca956a0-b75d-0289-0c88-5b5a8ef77142}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_Homography;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_Homography);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{bb0944e9-e8b2-0d01-194c-0cf553b9392a}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcPoints', ipSrcPoints);
AddInput('ipDestPoints', ipDestPoints);
AddInput('hrPrev', hrPrev);
AddOutput('aPerspectiveTransform', aPerspectiveTransform);
AddOutput('hresult', hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{72b7c6f1-0530-094d-066d-764ffe6d8972}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_Homography(
	ipSrcPoints := ipSrcPoints.Value, 
	ipDestPoints := ipDestPoints.Value, 
	aPerspectiveTransform := aPerspectiveTransform.Value, 
	hrPrev := hrPrev.Value);
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{2eb4be2c-6634-0dc4-3d3b-f588d4939bc1}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
    elementNumSrc : ULINT;
    elementNumDest : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcPoints.IsValid, 'ipSrcPoints must be a valid container');
Check.IsTrue(ipSrcPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_REAL), 'ipSrcPoints contains incorrect type');

ipSrcPoints.TryGetElementNum(elementNumSrc);
Check.IsTrue(elementNumSrc >= 4, 'ipSrcPoints must contain at least 4 elements');

Check.IsTrue(ipDestPoints.IsValid, 'ipDestPoints must be a valid container');
Check.IsTrue(ipDestPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_REAL), 'ipDestPoints contains incorrect type');

ipDestPoints.TryGetElementNum(elementNumDest);
Check.IsTrue(elementNumSrc = elementNumDest, 'ipDestPoints must contain the same number of elements as ipSrcPoints');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>