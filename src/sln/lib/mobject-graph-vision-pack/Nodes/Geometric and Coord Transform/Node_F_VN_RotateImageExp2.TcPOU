<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_RotateImageExp2" Id="{dcd08436-0cdf-0948-2bb4-2a40e298b764}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_RotateImageExp2 EXTENDS VisionNode
VAR
    ipSrcImage : _ITcVnImage;
    ipDestImage : _ITcVnImage;
    fAngleDeg : _LREAL(0.0);
    bAdjustDestSize : _BOOL(FALSE);
    eInterpolationType : _ETcVnInterpolationType(ETcVnInterpolationType.TCVN_IT_NEAREST_NEIGHBOR);
    eBorderInterpolation : 	_ETcVnBorderInterpolationMethod(ETcVnBorderInterpolationMethod.TCVN_BIM_DEFAULT);
    aBorderValue : _TcVnVector4_LREAL;
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{36aa03df-d649-0c09-31b5-81ce7b5ff0e2}" />
    <Method Name="Clone" Id="{5bd28b9a-fec7-03c2-3f60-8789d98fde14}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_RotateImageExp2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_RotateImageExp2);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{d2299306-b7e1-098b-35f7-1a8d30dff7ed}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddParameter('fAngleDeg', fAngleDeg);
AddParameter('bAdjustDestSize', bAdjustDestSize);
AddParameter('eInterpolationType', eInterpolationType);
AddParameter('eBorderInterpolation', eBorderInterpolation);
AddInput('aBorderValue', aBorderValue);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{b9d6f76d-bcbd-07b0-25ea-9c2cd1901568}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_RotateImageExp2(
    ipSrcImage := ipSrcImage.Value,
	ipDestImage := ipDestImage.Value,
    fAngleDeg := fAngleDeg.Value,
    bAdjustDestSize := bAdjustDestSize.Value,
    eInterpolationType := eInterpolationType.Value,
    eBorderInterpolation := eBorderInterpolation.Value,
    aBorderValue := aBorderValue.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{c837a0ab-da36-0266-0202-4c5d94bcfea0}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>