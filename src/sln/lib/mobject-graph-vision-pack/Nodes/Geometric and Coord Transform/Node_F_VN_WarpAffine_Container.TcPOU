<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_WarpAffine_Container" Id="{590edd4b-1ffa-000d-17f6-4afbfe6cbd20}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_WarpAffine_Container EXTENDS VisionNode
VAR
	ipSrcPoints : _ITcVnContainer;
    ipDestPoints : _ITcVnContainer;
    aTransformationMatrix : _TcVnMatrix2x3_LREAL;
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{e599e453-2e00-0e05-00f6-6645b9c7bb86}" />
    <Method Name="Clone" Id="{6fe02c47-1031-0685-2099-8eab365f8bf6}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_WarpAffine_Container;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_WarpAffine_Container);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{17cdbecf-f93e-0943-3869-12d7ab96fdc4}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcPoints', ipSrcPoints);
AddInput('aTransformationMatrix', aTransformationMatrix);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestPoints', ipDestPoints);
AddOutput('hresult',hresult);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{9ef90dd2-e4b2-04dd-2060-c9aa50a2ea56}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_WarpAffine_Container(
	ipSrcPoints := ipSrcPoints.Value, 
	ipDestPoints := ipDestPoints.Value, 
	aTransformationMatrix := aTransformationMatrix.Value, 
	hrPrev := hrPrev.Value);
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{4649e311-f6c1-0257-04e4-d9de72526896}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcPoints.IsValid, 'ipSrcPoints must be a valid container');
Check.IsTrue((ipSrcPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_DINT) OR
              ipSrcPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_REAL) OR
              ipSrcPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_LREAL)),
              'ipSrcPoints contains incorrect type');
              ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>