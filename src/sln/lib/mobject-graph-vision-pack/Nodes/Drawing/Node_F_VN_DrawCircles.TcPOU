<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_DrawCircles" Id="{3ea64223-8754-0e59-16b0-aa1a3a9c964b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_DrawCircles EXTENDS VisionNode
VAR
    ipCircles : _ITcVnContainer;
    nCircleIndex : _DINT(0);
    ipDestImage : _ITcVnImage;
    aColor : _TcVnVector4_LREAL;
    nThickness : _DINT(1);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{9737f5d6-96d5-0938-155f-b6174222810a}" />
    <Method Name="Clone" Id="{6a0b0f4d-3a63-06d3-26f0-152b5055abba}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_DrawCircles
;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_DrawCircles);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{88936e80-5d3f-0a3d-19fe-2d10a24a70f9}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipCircles', ipCircles);
AddParameter('nCircleIndex', nCircleIndex);
AddInput('ipDestImage', ipDestImage);
AddInput('aColor', aColor);
AddParameter('nThickness', nThickness);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{9e1cdb89-215c-0533-1638-942bd9fbc3ea}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_DrawCircles(
    ipCircles := ipCircles.Value,
    nCircleIndex := nCircleIndex.Value,
	ipDestImage := ipDestImage.Value,
    aColor := aColor.Value,
    nThickness := nThickness.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{ea307f45-5877-09ef-0aa4-46174ddc9101}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR
VAR
    containerElements : ULINT;
    maxIndexNumber : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipCircles.IsValid, 'ipCircles must be a valid container');
Check.IsTrue((ipCircles.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_DINT) OR
              ipCircles.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_Vector_TcVnPoint2_DINT)),
              'ipCircles contains incorrect type');

F_VN_GetNumberOfElements(ipCircles.Value, containerElements, S_OK);

Check.IsTrue((containerElements > 0), 'ipContours is empty');

IF Check.Failed THEN
    RETURN;
END_IF

maxIndexNumber := containerElements - 1;

IF (nCircleIndex.Value > -1) THEN
    Check.IsTrue((DINT_TO_ULINT(nCircleIndex.Value) <= maxIndexNumber), 'nCircleIndex out of range.');
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>