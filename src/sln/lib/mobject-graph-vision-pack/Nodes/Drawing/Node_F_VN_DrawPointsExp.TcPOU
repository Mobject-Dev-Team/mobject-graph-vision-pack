<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_DrawPointsExp" Id="{6c8c4a9c-07d2-06d6-2278-3cb8a824360b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_DrawPointsExp EXTENDS VisionNode
VAR
    ipPoints : _ITcVnContainer;
    ipDestImage : _ITcVnImage;
    eShape : _ETcVnDrawShape(ETcVnDrawShape.TCVN_DS_CIRCLE);
    aColor : _TcVnVector4_LREAL;
    nSize  : _UDINT(0);
    nThickness : _DINT(1);
    eLineType : _ETcVnLineType(ETcVnLineType.TCVN_LT_4_CONNECTED);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{661f6802-f8f1-0d86-1620-9781fc92e42a}" />
    <Method Name="Clone" Id="{71e9fc31-d485-0838-057b-c359a5e0b2d7}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_DrawPointsExp;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_DrawPointsExp);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{2078badd-5674-05f9-20ae-fd3939c68a21}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipPoints', ipPoints);
AddInput('ipDestImage', ipDestImage);
AddParameter('eShape', eShape);
AddInput('aColor', aColor);
AddParameter('nSize', nSize);
AddParameter('nThickness', nThickness);
AddParameter('eLineType', eLineType);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{82a10705-80f9-0ebd-2e66-7d880b640461}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_DrawPointsExp(
    ipPoints := ipPoints.Value,
	ipDestImage := ipDestImage.Value,
    eShape := eShape.Value,
    aColor := aColor.Value,
    nSize := nSize.Value,
    nThickness := nThickness.Value,
    eLineType := eLineType.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{b9fa8c95-996a-0b14-30f2-eb3de4a114f8}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipPoints.IsValid, 'ipPoints must be a valid container');
Check.IsTrue((ipPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_DINT) OR
              ipPoints.HasType(TC_GLOBAL_CONST_LIST.ContainerType_Vector_TcVnPoint2_REAL)),
              'ipPoints contains incorrect type');
              
Check.IsTrue(ipDestImage.IsValid, 'ipDestImage must contain an image');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>