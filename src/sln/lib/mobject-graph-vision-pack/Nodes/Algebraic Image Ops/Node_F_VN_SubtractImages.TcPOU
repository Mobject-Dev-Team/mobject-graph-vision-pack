<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_SubtractImages" Id="{3213bbeb-0919-0609-2850-17dc7e204bf0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_SubtractImages EXTENDS VisionNode
VAR
    ipSrcImage1 : _ITcVnImage;
    ipSrcImage2 : _ITcVnImage;
    ipDestImage : _ITcVnImage;
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{b452280f-6a60-02c7-052e-4147f6646ab0}" />
    <Method Name="Clone" Id="{936cd559-7ebb-0d4e-2cd7-53e198c33c2e}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_SubtractImages;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_SubtractImages);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{fbe8c195-015e-0298-24e9-1b2141dfe55a}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage1', ipSrcImage1);
AddInput('ipSrcImage2', ipSrcImage2);
AddInput('hrPrev', hrPrev);
AddOutput('ipDestImage', ipDestImage);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{50a761e3-1aaa-0a3b-1485-d5d32dcd1f28}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_SubtractImages(
    ipSrcImage1 := ipSrcImage1.Value,
    ipSrcImage2 := ipSrcImage2.Value,
	ipDestImage := ipDestImage.Value,
	hrPrev:= hrPrev.Value);
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{78d8334f-e146-0ea6-2bd1-8fe88b62e648}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage1.IsValid, 'ipSrcImage1 must contain an image');
Check.IsTrue(ipSrcImage2.IsValid, 'ipSrcImage2 must contain an image');
Check.IsTrue(IsImage1SizeEqualToImage2Size(ipSrcImage1.Value, ipSrcImage2.Value), 'ipSrcImage1 must be the same size as ipSrcImage2');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>