<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_ITcVnContainer_TestSuite" Id="{1e4049d5-5f40-4abd-9904-57a2d5afa742}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ITcVnContainer_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestIsValidAfterInit();
TestIsValidAfterContainerAdded();
TestSerializeTypeWith();
TestSerializeWith_Empty();
TestSerializeWith_Vector_REAL();
TestTryDeserializeFrom();
TestTryCheckIfEmpty();
TestTryCheckIfBasicContainer();
TestTryGetelementNum();
TestTryGetTypeName_Vector_REAL();
TestHasType_Vector_REAL();
]]></ST>
    </Implementation>
    <Method Name="TestHasType_Vector_REAL" Id="{85835300-9eb0-09a2-2c7a-4f3f67f94c58}">
      <Declaration><![CDATA[METHOD PUBLIC TestHasType_Vector_REAL
VAR
    _type : _ITcVnContainer;
    data : ARRAY [0..4] OF REAL := [0.0, 1.1, 2.2, 3.3, 4.4];
    expected : GUID := TC_GLOBAL_CONST_LIST.ContainerType_Vector_REAL;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestHasType_Vector_REAL');

F_VN_CreateContainerFromArray(pData := ADR(data), ipContainer := _type.Value, nTypeGuid := expected, nElementNum := 5, hrPrev := S_OK);

result := _type.HasType(expected);

AssertTrue(
	Condition := result,
	Message := 'Container did not contain expected type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsValidAfterContainerAdded" Id="{1f39ce3c-c862-0870-2798-ba7a943998e5}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsValidAfterContainerAdded
VAR CONSTANT
    ELEMENTS : ULINT := 10;
END_VAR
VAR
    _type : _ITcVnContainer;
    result : BOOL;
	data : ARRAY [1..ELEMENTS] OF USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsValidAfterContainerAdded');

F_VN_CreateContainerFromArray(pData := ADR(data), ipContainer := _type.Value, nTypeGuid := ContainerType_Vector_USINT, nElementNum := ELEMENTS, hrPrev := S_OK);

result := _type.IsValid;

AssertTrue(
	Condition := result,
	Message := 'Incorrect state of IsValid'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsValidAfterInit" Id="{953bf3bb-312d-0d6f-1769-ab603cedf296}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsValidAfterInit
VAR
    _type : _ITcVnContainer;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsValidAfterInit');

result := _type.IsValid;

AssertFalse(
	Condition := result,
	Message := 'Incorrect state of IsValid'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{0a66d2f4-2d79-4286-a913-9e8c64e470c0}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ITcVnContainer;
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"INTERFACE","identifier":"ITcVnContainer"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith_Empty" Id="{3f0d82d6-4257-4974-a7ff-1e5356b1c237}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith_Empty
VAR
    _type : _ITcVnContainer;
    serializer : JsonSerializer;
    expected : STRING := 'null';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith_Empty');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith_Vector_REAL" Id="{a74eaf66-c9a6-0a63-1515-b4680cf5c680}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith_Vector_REAL
VAR
    _type : _ITcVnContainer;
	data : ARRAY [0..4] OF REAL := [0.0, 1.1, 2.2, 3.3, 4.4];
    serializer : JsonSerializer;
    expected : STRING(500) := '{"containerTypeName":"CTcVnContainer_Vector_REAL","containerTypeGuid":"4697D18B-33C6-47D3-A3CD-5F0562ACC387","elementTypeGuid":"18071995-0000-0000-0000-00000000000D","elementNum":5,"elementSize":4,"elements":[0.0,1.100000023841858,2.200000047683716,3.299999952316284,4.400000095367432]}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith_Vector_REAL');

F_VN_CreateContainerFromArray(pData := ADR(data), ipContainer := _type.Value, nTypeGuid := ContainerType_Vector_REAL, nElementNum := 5, hrPrev := S_OK);

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryCheckIfBasicContainer" Id="{1088d48a-e23b-0ae8-10a5-7f674c481cf1}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryCheckIfBasicContainer
VAR
    _typeBasicData : _ITcVnContainer;
    _typeComplexData : _ITcVnContainer;
    basicData : ARRAY [0..4] OF REAL := [0.0, 1.1, 2.2, 3.3, 4.4];
    actual : BOOL;
    result : BOOL;
    hr : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryCheckIfBasicContainer');

// Create container with basic data.
F_VN_CreateContainerFromArray(pData := ADR(basicData), ipContainer := _typeBasicData.Value, nTypeGuid := ContainerType_Vector_REAL, nElementNum := 5, hrPrev := S_OK);

result := _typeBasicData.TryCheckIfBasicContainer(actual);

AssertTrue(
	Condition := result,
	Message := 'Check if basic container failed.'
);

AssertTrue(
	Condition := actual,
	Message := 'Container did not contain basic elements.'
);

// Create container for complex data. (Container of containers. Note the Vector_Vector type.)
hr := F_VN_CreateContainer(ipContainer := _typeComplexData.Value, nTypeGuid := ContainerType_Vector_Vector_REAL, nElementNum := 1, hrPrev := S_OK);
hr := F_VN_SetAt_ITcVnContainer(ipElement := _typeBasicData.Value, ipContainer := _typeComplexData.Value, nIndex := 0, hrPrev := hr);

result := _typeComplexData.TryCheckIfBasicContainer(actual);

AssertTrue(
	Condition := result,
	Message := 'Check if basic container failed.'
);

AssertFalse(
	Condition := actual,
	Message := 'Container did not contain complex (Container of Container) elements.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryCheckIfEmpty" Id="{808e93ca-1835-0aa1-3116-eb7eaaadc4d9}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryCheckIfEmpty
VAR
    _typeEmpty : _ITcVnContainer;
    _typeData : _ITcVnContainer;
    data : ARRAY [0..4] OF REAL := [0.0, 1.1, 2.2, 3.3, 4.4];
    actual : BOOL;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryCheckIfEmpty');

// Create container with no data.
F_VN_CreateContainer(ipContainer := _typeEmpty.Value, nTypeGuid := ContainerType_Vector_REAL, nElementNum := 0, hrPrev := S_OK);

result := _typeEmpty.TryCheckIfEmpty(actual);

AssertTrue(
	Condition := result,
	Message := 'Container check if empty failed.'
);

AssertTrue(
	Condition := actual,
	Message := 'Container was not empty.'
);

// Create container with data.
F_VN_CreateContainerFromArray(pData := ADR(data), ipContainer := _typeData.Value, nTypeGuid := ContainerType_Vector_REAL, nElementNum := 5, hrPrev := S_OK);

result := _typeData.TryCheckIfEmpty(actual);

AssertTrue(
	Condition := result,
	Message := 'Container check if empty failed.'
);

AssertFalse(
	Condition := actual,
	Message := 'Container was empty.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{5be8ee3a-e230-4f18-891f-7b24b67d0252}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '';
    _type : _ITcVnContainer;
    expected : HRESULT;
    actual : HRESULT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryGetElementNum" Id="{aab25c5f-baec-0d4c-0c3f-9f278014ae79}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryGetElementNum
VAR
    _type : _ITcVnContainer;
    data : ARRAY [0..4] OF REAL := [0.0, 1.1, 2.2, 3.3, 4.4];
    expected : ULINT := 5;
    actual : ULINT;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryGetElementNum');

F_VN_CreateContainerFromArray(pData := ADR(data), ipContainer := _type.Value, nTypeGuid := ContainerType_Vector_REAL, nElementNum := 5, hrPrev := S_OK);

result := _type.TryGetElementNum(actual);

AssertTrue(
	Condition := result,
	Message := 'Get container element number failed.'
);

AssertEquals_ULINT(Expected := expected,
             Actual := actual,
             Message := 'Container did not return correct number of elements.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryGetTypeName_Vector_REAL" Id="{d08b5241-07f7-0fbb-147c-4d290dcc1c58}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryGetTypeName_Vector_REAL
VAR
    _type : _ITcVnContainer;
    data : ARRAY [0..4] OF REAL := [0.0, 1.1, 2.2, 3.3, 4.4];
    expected : STRING := 'CTcVnContainer_Vector_REAL';
    actual : STRING;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryGetTypeName_Vector_REAL');

F_VN_CreateContainerFromArray(pData := ADR(data), ipContainer := _type.Value, nTypeGuid := ContainerType_Vector_REAL, nElementNum := 5, hrPrev := S_OK);

result := _type.TryGetTypeName(actual);

AssertTrue(
	Condition := result,
	Message := 'Get container type name failed.'
);

AssertEquals_STRING(Expected := expected,
             Actual := actual,
             Message := 'Container did not return correct name.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>