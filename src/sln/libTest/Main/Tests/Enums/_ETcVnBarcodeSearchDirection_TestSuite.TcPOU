<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnBarcodeSearchDirection_TestSuite" Id="{e166c01d-ec3b-086f-3762-9396edf4e102}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ETcVnBarcodeSearchDirection_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{2850f3b0-8f99-0f1b-39d8-17cb198c4757}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{59ca2b57-99f3-0289-0ca5-50aded2ad0da}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
	target : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_ANY;
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_ANY;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value continued to follow target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{e45754e8-ca73-0a15-275c-eea30c8ee7af}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{29a69910-8a8e-0e4f-0a2e-e6b67d7e5149}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : STRING := 'ETcVnBarcodeSearchDirection';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{748679f2-037f-0334-2cb6-5fee9e0a3844}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
	target : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_ANY;
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{51a35dd6-fd7e-0c4c-1da2-7889248dfadd}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
	target : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_ANY;
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{f553da7e-66a0-0487-2176-58f6a9ab1d26}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"ENUM","identifier":"ETcVnBarcodeSearchDirection","enumerations":["TCVN_BSD_ANY","TCVN_BSD_HORIZONTAL","TCVN_BSD_VERTICAL"],"baseType":{"typeName":"UDINT","minValue":0,"maxValue":4294967295,"isSigned":false,"isFloat":false}}'; 
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{f7ddadc2-d6c1-02d6-1f2f-8d20810a8b61}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    serializer : JsonSerializer;
    expected : STRING := '"TCVN_BSD_ANY"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{6dcd03a6-4513-049f-3337-4e1aaf999832}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : UDINT := SIZEOF(ETcVnBarcodeSearchDirection);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{b011dd36-d0f6-0007-1fe9-6b6228bc7005}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TCVN_BSD_ANY"';
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_ANY;
    actual : ETcVnBarcodeSearchDirection;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{c8df596e-7c17-0946-30a6-380d5abedb97}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
	target : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{ff787e54-0094-0c0a-1168-0fff2b8face0}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
	target : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{abf5f8c1-2f7c-0aa2-1d80-7e151d36dff6}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : STRING := 'ENUM';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{9b55bec1-63ed-03bf-0cb7-ce7c4666f268}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := ETcVnBarcodeSearchDirection.TCVN_BSD_HORIZONTAL;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{4ded3f3d-eb29-0a73-367d-1bb804fffe90}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _ETcVnBarcodeSearchDirection(ETcVnBarcodeSearchDirection.TCVN_BSD_ANY);
    expected : ETcVnBarcodeSearchDirection := ETcVnBarcodeSearchDirection.TCVN_BSD_ANY;
    actual : ETcVnBarcodeSearchDirection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>