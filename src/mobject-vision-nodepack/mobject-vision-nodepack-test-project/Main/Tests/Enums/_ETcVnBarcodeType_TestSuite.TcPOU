<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnBarcodeType_TestSuite" Id="{0e8b674f-6649-0700-1575-d7e981b0f49c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ETcVnBarcodeType_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{e7cf9bac-e984-0862-0b19-e3147ad194aa}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{7834ae55-65ca-098f-316e-4fb16a685d22}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value continued to follow target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{b86522d5-f9f6-05d5-1e4f-0bb7622021b5}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{6b89c664-c087-0399-1b24-1658fce45d57}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : STRING := 'ETcVnBarcodeType';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{aeea1f40-dea5-0c6a-0df8-c6c00e4e15d3}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{0747a5be-b3a1-0223-232d-284a0d0f24b9}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{3dcaa193-16fa-078e-250f-c73ff11db85d}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"ENUM","identifier":"ETcVnBarcodeType","enumerations":["TCVN_BT_CODABAR","TCVN_BT_CODE39","TCVN_BT_CODE93","TCVN_BT_CODE128","TCVN_BT_EAN8","TCVN_BT_EAN13","TCVN_BT_ITF","TCVN_BT_UPCA","TCVN_BT_UPCE","TCVN_BT_ANY","TCVN_BT_CODE39EXTENDED"],"baseType":{"typeName":"UDINT","minValue":0,"maxValue":4294967295,"isSigned":false,"isFloat":false}}'; 
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{3c6b1cc8-d244-00ad-2c8b-798fd93c8f19}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    serializer : JsonSerializer;
    expected : STRING := '"TCVN_BT_CODABAR"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{c30df670-159a-05c4-2600-b1b634c66518}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : UDINT := SIZEOF(ETcVnBarcodeType);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{b5089424-574c-0365-08aa-b59079f18c20}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TCVN_BT_CODABAR"';
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    actual : ETcVnBarcodeType;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{958a8de2-f8bc-0789-0411-f41f5291725d}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{be09072b-259a-0dc3-0e2e-394628d2a064}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
	target : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{bffc54c3-3ad6-010c-13ee-110844524b66}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : STRING := 'ENUM';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{82495232-f88e-0225-35d4-7d9ddd731b85}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODE39;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := ETcVnBarcodeType.TCVN_BT_CODE39;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{0d03e915-ce97-0b4b-2910-bd45a2401c26}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _ETcVnBarcodeType(ETcVnBarcodeType.TCVN_BT_CODABAR);
    expected : ETcVnBarcodeType := ETcVnBarcodeType.TCVN_BT_CODABAR;
    actual : ETcVnBarcodeType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>