<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnColorSpaceTransform_TestSuite" Id="{24dac242-c222-00b4-3a7d-6db877f20858}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ETcVnColorSpaceTransform_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{e5969bce-bbef-02b8-1a16-b9c158decbae}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{47ae4c06-ecab-0887-303d-cfec374906b6}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
	target : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA;
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := ETcVnColorSpaceTransform.TCVN_CST_MAX;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value continued to follow target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{6107ddef-ba1e-0122-062d-48c929f1a3fe}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{034d263a-bf49-0f1f-3101-d83c9aa9f1f0}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : STRING := 'ETcVnColorSpaceTransform';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{d0696866-672b-0e23-18e2-84f8db06acf0}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
	target : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA;
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_MAX;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := ETcVnColorSpaceTransform.TCVN_CST_MAX;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{4036932d-7883-0189-3981-a50529f59333}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
	target : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA;
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_MAX;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := ETcVnColorSpaceTransform.TCVN_CST_MAX;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{9028dec1-715d-0136-164f-d90e76bab1a2}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    serializer : JsonSerializer;
    expected : STRING(6000) := '{"typeName":"ENUM","identifier":"ETcVnColorSpaceTransform","enumerations":["TCVN_CST_BGR_TO_BGRA","TCVN_CST_RGB_TO_RGBA","TCVN_CST_BGRA_TO_BGR","TCVN_CST_RGBA_TO_RGB","TCVN_CST_BGR_TO_RGBA","TCVN_CST_RGB_TO_BGRA","TCVN_CST_BGRA_TO_RGB","TCVN_CST_RGBA_TO_BGR","TCVN_CST_BGR_TO_RGB","TCVN_CST_RGB_TO_BGR","TCVN_CST_BGRA_TO_RGBA","TCVN_CST_RGBA_TO_BGRA","TCVN_CST_BGR_TO_GRAY","TCVN_CST_RGB_TO_GRAY","TCVN_CST_GRAY_TO_BGR","TCVN_CST_GRAY_TO_RGB","TCVN_CST_GRAY_TO_BGRA","TCVN_CST_GRAY_TO_RGBA","TCVN_CST_BGRA_TO_GRAY","TCVN_CST_RGBA_TO_GRAY","TCVN_CST_RGB_TO_BGR_565","TCVN_CST_BGR_TO_BGR_565","TCVN_CST_BGR_565_TO_RGB","TCVN_CST_BGR_565_TO_BGR","TCVN_CST_RGBA_TO_BGR_565","TCVN_CST_BGRA_TO_BGR_565","TCVN_CST_BGR_565_TO_RGBA","TCVN_CST_BGR_565_TO_BGRA","TCVN_CST_GRAY_TO_BGR_565","TCVN_CST_BGR_565_TO_GRAY","TCVN_CST_RGB_TO_BGR_555","TCVN_CST_BGR_TO_BGR_555","TCVN_CST_BGR_555_TO_RGB","TCVN_CST_BGR_555_TO_BGR","TCVN_CST_RGBA_TO_BGR_555","TCVN_CST_BGRA_TO_BGR_555","TCVN_CST_BGR_555_TO_RGBA","TCVN_CST_BGR_555_TO_BGRA","TCVN_CST_GRAY_TO_BGR_555","TCVN_CST_BGR_555_TO_GRAY","TCVN_CST_BGR_TO_XYZ","TCVN_CST_RGB_TO_XYZ","TCVN_CST_XYZ_TO_BGR","TCVN_CST_XYZ_TO_RGB","TCVN_CST_BGR_TO_YCRCB","TCVN_CST_RGB_TO_YCRCB","TCVN_CST_YCRCB_TO_BGR","TCVN_CST_YCRCB_TO_RGB","TCVN_CST_BGR_TO_HSV","TCVN_CST_RGB_TO_HSV","TCVN_CST_BGR_TO_LAB","TCVN_CST_RGB_TO_LAB","TCVN_CST_BAYER_RG_TO_BGR","TCVN_CST_BAYER_BG_TO_RGB","TCVN_CST_BAYER_GR_TO_BGR","TCVN_CST_BAYER_GB_TO_RGB","TCVN_CST_BAYER_BG_TO_BGR","TCVN_CST_BAYER_RG_TO_RGB","TCVN_CST_BAYER_GB_TO_BGR","TCVN_CST_BAYER_GR_TO_RGB","TCVN_CST_BGR_TO_LUV","TCVN_CST_RGB_TO_LUV","TCVN_CST_BGR_TO_HLS","TCVN_CST_RGB_TO_HLS","TCVN_CST_HSV_TO_BGR","TCVN_CST_HSV_TO_RGB","TCVN_CST_LAB_TO_BGR","TCVN_CST_LAB_TO_RGB","TCVN_CST_LUV_TO_BGR","TCVN_CST_LUV_TO_RGB","TCVN_CST_HLS_TO_BGR","TCVN_CST_HLS_TO_RGB","TCVN_CST_BAYER_RG_TO_BGR_VNG","TCVN_CST_BAYER_GR_TO_BGR_VNG","TCVN_CST_BAYER_BG_TO_BGR_VNG","TCVN_CST_BAYER_GB_TO_BGR_VNG","TCVN_CST_BAYER_RG_TO_RGB_VNG","TCVN_CST_BAYER_GR_TO_RGB_VNG","TCVN_CST_BAYER_BG_TO_RGB_VNG","TCVN_CST_BAYER_GB_TO_RGB_VNG","TCVN_CST_BGR_TO_HSV_FULL","TCVN_CST_RGB_TO_HSV_FULL","TCVN_CST_BGR_TO_HLS_FULL","TCVN_CST_RGB_TO_HLS_FULL","TCVN_CST_HSV_TO_BGR_FULL","TCVN_CST_HSV_TO_RGB_FULL","TCVN_CST_HLS_TO_BGR_FULL","TCVN_CST_HLS_TO_RGB_FULL","TCVN_CST_LBGR_TO_LAB","TCVN_CST_LRGB_TO_LAB","TCVN_CST_LBGR_TO_LUV","TCVN_CST_LRGB_TO_LUV","TCVN_CST_LAB_TO_LBGR","TCVN_CST_LAB_TO_LRGB","TCVN_CST_LUV_TO_LBGR","TCVN_CST_LUV_TO_LRGB","TCVN_CST_BGR_TO_YUV","TCVN_CST_RGB_TO_YUV","TCVN_CST_YUV_TO_BGR","TCVN_CST_YUV_TO_RGB","TCVN_CST_BAYER_RG_TO_GRAY","TCVN_CST_BAYER_GR_TO_GRAY","TCVN_CST_BAYER_BG_TO_GRAY","TCVN_CST_BAYER_GB_TO_GRAY","TCVN_CST_YUV_420_NV12_TO_RGB","TCVN_CST_YUV_420_NV12_TO_BGR","TCVN_CST_YUV_420_NV21_TO_RGB","TCVN_CST_YUV_420_NV21_TO_BGR","TCVN_CST_YUV_420_SP_TO_RGB","TCVN_CST_YUV_420_SP_TO_BGR","TCVN_CST_YUV_420_NV12_TO_RGBA","TCVN_CST_YUV_420_NV12_TO_BGRA","TCVN_CST_YUV_420_NV21_TO_RGBA","TCVN_CST_YUV_420_NV21_TO_BGRA","TCVN_CST_YUV_420_SP_TO_RGBA","TCVN_CST_YUV_420_SP_TO_BGRA","TCVN_CST_YUV_420_YV12_TO_RGB","TCVN_CST_YUV_420_YV12_TO_BGR","TCVN_CST_YUV_420_IYUV_TO_RGB","TCVN_CST_YUV_420_IYUV_TO_BGR","TCVN_CST_YUV_420_I420_TO_RGB","TCVN_CST_YUV_420_I420_TO_BGR","TCVN_CST_YUV_420_P_TO_RGB","TCVN_CST_YUV_420_P_TO_BGR","TCVN_CST_YUV_420_YV12_TO_RGBA","TCVN_CST_YUV_420_YV12_TO_BGRA","TCVN_CST_YUV_420_IYUV_TO_RGBA","TCVN_CST_YUV_420_IYUV_TO_BGRA","TCVN_CST_YUV_420_I420_TO_RGBA","TCVN_CST_YUV_420_I420_TO_BGRA","TCVN_CST_YUV_420_P_TO_RGBA","TCVN_CST_YUV_420_P_TO_BGRA","TCVN_CST_YUV_420_TO_GRAY","TCVN_CST_YUV_420_NV21_TO_GRAY","TCVN_CST_YUV_420_NV12_TO_GRAY","TCVN_CST_YUV_420_YV12_TO_GRAY","TCVN_CST_YUV_420_IYUV_TO_GRAY","TCVN_CST_YUV_420_I420_TO_GRAY","TCVN_CST_YUV_420_SP_TO_GRAY","TCVN_CST_YUV_420_P_TO_GRAY","TCVN_CST_YUV_422_UYVY_TO_RGB","TCVN_CST_YUV_422_UYVY_TO_BGR","TCVN_CST_YUV_422_Y422_TO_RGB","TCVN_CST_YUV_422_Y422_TO_BGR","TCVN_CST_YUV_422_UYNV_TO_RGB","TCVN_CST_YUV_422_UYNV_TO_BGR","TCVN_CST_YUV_422_UYVY_TO_RGBA","TCVN_CST_YUV_422_UYVY_TO_BGRA","TCVN_CST_YUV_422_Y422_TO_RGBA","TCVN_CST_YUV_422_Y422_TO_BGRA","TCVN_CST_YUV_422_UYNV_TO_RGBA","TCVN_CST_YUV_422_UYNV_TO_BGRA","TCVN_CST_YUV_422_YUY2_TO_RGB","TCVN_CST_YUV_422_YUY2_TO_BGR","TCVN_CST_YUV_422_YVYU_TO_RGB","TCVN_CST_YUV_422_YVYU_TO_BGR","TCVN_CST_YUV_422_YUYV_TO_RGB","TCVN_CST_YUV_422_YUYV_TO_BGR","TCVN_CST_YUV_422_YUNV_TO_RGB","TCVN_CST_YUV_422_YUNV_TO_BGR","TCVN_CST_YUV_422_YUY2_TO_RGBA","TCVN_CST_YUV_422_YUY2_TO_BGRA","TCVN_CST_YUV_422_YVYU_TO_RGBA","TCVN_CST_YUV_422_YVYU_TO_BGRA","TCVN_CST_YUV_422_YUYV_TO_RGBA","TCVN_CST_YUV_422_YUYV_TO_BGRA","TCVN_CST_YUV_422_YUNV_TO_RGBA","TCVN_CST_YUV_422_YUNV_TO_BGRA","TCVN_CST_YUV_422_UYVY_TO_GRAY","TCVN_CST_YUV_422_YUY2_TO_GRAY","TCVN_CST_YUV_422_Y422_TO_GRAY","TCVN_CST_YUV_422_UYNV_TO_GRAY","TCVN_CST_YUV_422_YVYU_TO_GRAY","TCVN_CST_YUV_422_YUYV_TO_GRAY","TCVN_CST_YUV_422_YUNV_TO_GRAY","TCVN_CST_RGBA_TO_PREMULTIPLICATED_RGBA","TCVN_CST_PREMULTIPLICATED_RGBA_TO_RGBA","TCVN_CST_RGB_TO_YUV_420_I420","TCVN_CST_BGR_TO_YUV_420_I420","TCVN_CST_RGB_TO_YUV_420_IYUV","TCVN_CST_BGR_TO_YUV_420_IYUV","TCVN_CST_RGBA_TO_YUV_420_I420","TCVN_CST_BGRA_TO_YUV_420_I420","TCVN_CST_RGBA_TO_YUV_420_IYUV","TCVN_CST_BGRA_TO_YUV_420_IYUV","TCVN_CST_RGB_TO_YUV_420_YV12","TCVN_CST_BGR_TO_YUV_420_YV12","TCVN_CST_RGBA_TO_YUV_420_YV12","TCVN_CST_BGRA_TO_YUV_420_YV12","TCVN_CST_BAYER_RG_TO_BGR_EA","TCVN_CST_BAYER_GR_TO_BGR_EA","TCVN_CST_BAYER_BG_TO_BGR_EA","TCVN_CST_BAYER_GB_TO_BGR_EA","TCVN_CST_BAYER_RG_TO_RGB_EA","TCVN_CST_BAYER_GR_TO_RGB_EA","TCVN_CST_BAYER_BG_TO_RGB_EA","TCVN_CST_BAYER_GB_TO_RGB_EA","TCVN_CST_BAYER_RG_TO_BGRA","TCVN_CST_BAYER_GR_TO_BGRA","TCVN_CST_BAYER_BG_TO_BGRA","TCVN_CST_BAYER_GB_TO_BGRA","TCVN_CST_BAYER_RG_TO_RGBA","TCVN_CST_BAYER_GR_TO_RGBA","TCVN_CST_BAYER_BG_TO_RGBA","TCVN_CST_BAYER_GB_TO_RGBA","TCVN_CST_MAX"],"baseType":{"typeName":"DINT","minValue":-2147483648,"maxValue":2147483647,"isSigned":true,"isFloat":false}}'; 
    actual : STRING(6000);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{6a87b643-6caa-05f8-2f2c-7dab6d765014}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    serializer : JsonSerializer;
    expected : STRING := '"TCVN_CST_BGR_TO_BGRA"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{15f6b56b-f631-006a-0697-93ae9916beef}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : UDINT := SIZEOF(ETcVnColorSpaceTransform);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{dd0eaaaf-ec9b-06e4-10a3-38ac3071167a}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TCVN_CST_BGR_TO_BGRA"';
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA;
    actual : ETcVnColorSpaceTransform;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{19068429-665f-0706-39a0-eff92a89a50f}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
	target : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_MAX;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := ETcVnColorSpaceTransform.TCVN_CST_MAX;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{fb923338-ec06-0f35-3bed-1b0276bd40f8}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
	target : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_MAX;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := ETcVnColorSpaceTransform.TCVN_CST_MAX;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{0930f8c5-225e-04da-0ff0-6b3e3a475b09}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : STRING := 'ENUM';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{0b103f08-7475-0605-331c-bb52dd42ce2f}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_MAX;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := ETcVnColorSpaceTransform.TCVN_CST_MAX;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{d5340c79-9f6b-02c1-38f6-8ca1fa7f0586}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _ETcVnColorSpaceTransform(ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA);
    expected : ETcVnColorSpaceTransform := ETcVnColorSpaceTransform.TCVN_CST_BGR_TO_BGRA;
    actual : ETcVnColorSpaceTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>