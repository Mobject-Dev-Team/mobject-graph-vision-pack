<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnSolvePnPMethod" Id="{09e33712-f1dc-418b-abd6-9d0c12aa2cd0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _ETcVnSolvePnPMethod EXTENDS EnumDatatypeBase
VAR
	localData : ETcVnSolvePnPMethod;
	activeData : REFERENCE TO ETcVnSolvePnPMethod;
	enumBaseDatatype : _DINT(localData);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{7bec12f8-202e-482b-8dc0-4feaa1a5bd2d}" />
    <Folder Name="Private" Id="{977b3a90-7035-4a04-a53b-01f1afb13a4b}" />
    <Folder Name="Protected" Id="{33b9dbd5-7e99-4f8d-9cbc-290e5fc93424}" />
    <Method Name="AddLocalEnumeration" Id="{eb82f0cf-ce83-4373-a05a-4620c427be11}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddLocalEnumeration
VAR_INPUT
	Enumeration : T_MAXSTRING;
	Value : ETcVnSolvePnPMethod;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddEnumeration(Enumeration, Value);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Address" Id="{06495e49-a60e-4170-b7d4-865bc579494a}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{2f630b28-0a65-4c82-a505-44dafbad7d44}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{e2875eca-ebe8-4b10-8673-4e4fab37e8f2}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetBaseDatatypeReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{a8101c9c-fc8d-44cd-9902-d09d1121103f}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _ETcVnSolvePnPMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_ETcVnSolvePnPMethod(InitialValue := Value));
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{81b0bb1d-c098-4663-bca1-bf81ace61f67}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : ETcVnSolvePnPMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;
AddBaseDatatype(enumBaseDatatype);
ClearReference();

AddLocalEnumeration('TCVN_SPM_ITERATIVE', ETcVnSolvePnPMethod.TCVN_SPM_ITERATIVE);
AddLocalEnumeration('TCVN_SPM_EPNP', ETcVnSolvePnPMethod.TCVN_SPM_EPNP);
AddLocalEnumeration('TCVN_SPM_P3P', ETcVnSolvePnPMethod.TCVN_SPM_P3P);
AddLocalEnumeration('TCVN_SPM_AP3P', ETcVnSolvePnPMethod.TCVN_SPM_AP3P);
AddLocalEnumeration('TCVN_SPM_IPPE', ETcVnSolvePnPMethod.TCVN_SPM_IPPE);
AddLocalEnumeration('TCVN_SPM_IPPE_SQUARE', ETcVnSolvePnPMethod.TCVN_SPM_IPPE_SQUARE);
AddLocalEnumeration('TCVN_SPM_SQPNP', ETcVnSolvePnPMethod.TCVN_SPM_SQPNP);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Identifier" Id="{d03fd843-69e3-4f2a-8669-74361265bccb}">
      <Declaration><![CDATA[PROPERTY PUBLIC Identifier : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{ee048062-3c48-4720-b468-944d8ec2f344}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Identifier := 'ETcVnSolvePnPMethod';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsEnumeratorValueEqual" Id="{79ef74b0-0ae3-42df-96f9-0e64625d4fb4}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD IsEnumeratorValueEqual : BOOL
VAR_INPUT
	Enumerator : I_KeyValueForwardEnumerator;
END_VAR
VAR
	storedValue : ETcVnSolvePnPMethod;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Enumerator.TryGet(storedValue) THEN
	RETURN;
END_IF

IsEnumeratorValueEqual := storedValue = activeData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{d8580204-88a6-42a4-bf77-4c51492e86dc}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ETcVnSolvePnPMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetBaseDatatypeReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBaseDatatypeReference" Id="{642bb32b-a93d-4248-95e5-d2962bf15955}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetBaseDatatypeReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumBaseDatatype.MakeReferenceTo(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{a15e31c3-c2cd-4865-8b5d-b301c7f42453}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{73ce94f4-9069-4b74-a9d1-da86d0dee865}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryMakeReferenceTo" Id="{d0ca4815-38c1-4c4c-912e-56c291f76f27}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	targetAsEnum : I_EnumDatatype;
	pTargetData : POINTER TO ETcVnSolvePnPMethod;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Target.TryResolveAsEnumDatatype(targetAsEnum) THEN
	RETURN;
END_IF

IF targetAsEnum.Identifier <> Identifier THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetBaseDatatypeReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{bf8b7a9c-c335-4e63-915a-7bd149c880a7}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : ETcVnSolvePnPMethod]]></Declaration>
      <Get Name="Get" Id="{b8955399-a94f-4ffa-ae17-34e2cfa9e7e5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := activeData;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6d4f359a-bfc6-4008-87d0-3f4714009446}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[activeData := Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>