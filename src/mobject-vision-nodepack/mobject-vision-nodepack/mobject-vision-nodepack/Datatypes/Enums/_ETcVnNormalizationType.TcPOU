<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnNormalizationType" Id="{93101cbe-9165-44c2-9e82-92abc7cfcb1b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _ETcVnNormalizationType EXTENDS EnumDatatypeBase
VAR
	localData : ETcVnNormalizationType;
	activeData : REFERENCE TO ETcVnNormalizationType;
	enumBaseDatatype : _DINT(localData);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{71508e59-1deb-45f1-833e-13d9873b0d86}" />
    <Folder Name="Private" Id="{d9c7342c-37ff-4e94-9f9d-8fa011283dad}" />
    <Folder Name="Protected" Id="{b346f919-78e3-453e-8c19-7e983481a87b}" />
    <Method Name="AddLocalEnumeration" Id="{91dcbdcc-4b7d-4c47-bb8b-bcf33ea90413}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddLocalEnumeration
VAR_INPUT
	Enumeration : T_MAXSTRING;
	Value : ETcVnNormalizationType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddEnumeration(Enumeration, Value);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Address" Id="{f8712112-6106-4757-8cc9-55d5ccb9abf9}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{042ab79d-3572-4b28-b54f-0ea143846a6a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{37241e36-de70-4572-afe3-b4229b94b082}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetBaseDatatypeReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{81992b38-b8c0-435b-91f9-0a457aeea6dd}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _ETcVnNormalizationType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_ETcVnNormalizationType(InitialValue := Value));
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{40e6eaf4-5b58-4b62-b4f7-25c397e8d00b}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : ETcVnNormalizationType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;
AddBaseDatatype(enumBaseDatatype);
ClearReference();

AddLocalEnumeration('TCVN_NT_INF', ETcVnNormalizationType.TCVN_NT_INF);
AddLocalEnumeration('TCVN_NT_L1', ETcVnNormalizationType.TCVN_NT_L1);
AddLocalEnumeration('TCVN_NT_L2', ETcVnNormalizationType.TCVN_NT_L2);
AddLocalEnumeration('TCVN_NT_L2SQR', ETcVnNormalizationType.TCVN_NT_L2SQR);
AddLocalEnumeration('TCVN_NT_HAMMING', ETcVnNormalizationType.TCVN_NT_HAMMING);
AddLocalEnumeration('TCVN_NT_HAMMING2', ETcVnNormalizationType.TCVN_NT_HAMMING2);
AddLocalEnumeration('TCVN_NT_RELATIVE_INF', ETcVnNormalizationType.TCVN_NT_RELATIVE_INF);
AddLocalEnumeration('TCVN_NT_RELATIVE_L1', ETcVnNormalizationType.TCVN_NT_RELATIVE_L1);
AddLocalEnumeration('TCVN_NT_RELATIVE_L2', ETcVnNormalizationType.TCVN_NT_RELATIVE_L2);
AddLocalEnumeration('TCVN_NT_RELATIVE_L2SQR', ETcVnNormalizationType.TCVN_NT_RELATIVE_L2SQR);
AddLocalEnumeration('TCVN_NT_RELATIVE_HAMMING', ETcVnNormalizationType.TCVN_NT_RELATIVE_HAMMING);
AddLocalEnumeration('TCVN_NT_RELATIVE_HAMMING2', ETcVnNormalizationType.TCVN_NT_RELATIVE_HAMMING2);
AddLocalEnumeration('TCVN_NT_MINMAX', ETcVnNormalizationType.TCVN_NT_MINMAX);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Identifier" Id="{d576d098-ab26-469c-845d-7dcbf3acf460}">
      <Declaration><![CDATA[PROPERTY PUBLIC Identifier : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{bb87498b-5af2-4d93-a5f9-dd65ee905084}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Identifier := 'ETcVnNormalizationType';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsEnumeratorValueEqual" Id="{057003a5-fdd8-4c5f-8f90-7ff875267c1b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD IsEnumeratorValueEqual : BOOL
VAR_INPUT
	Enumerator : I_KeyValueForwardEnumerator;
END_VAR
VAR
	storedValue : ETcVnNormalizationType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Enumerator.TryGet(storedValue) THEN
	RETURN;
END_IF

IsEnumeratorValueEqual := storedValue = activeData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{82587b60-506e-4a95-9a37-e5bc19a6e654}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ETcVnNormalizationType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetBaseDatatypeReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBaseDatatypeReference" Id="{731766d4-ddaf-4f80-9d9c-13efbfdf451c}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetBaseDatatypeReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumBaseDatatype.MakeReferenceTo(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{f1da0b07-654a-4731-811d-debf75d6f443}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{aa08b037-2814-4a6a-8265-95371f00e38a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryMakeReferenceTo" Id="{6b04c231-c590-40c7-afa7-96d781098c76}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	targetAsEnum : I_EnumDatatype;
	pTargetData : POINTER TO ETcVnNormalizationType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Target.TryResolveAsEnumDatatype(targetAsEnum) THEN
	RETURN;
END_IF

IF targetAsEnum.Identifier <> Identifier THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetBaseDatatypeReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{9842fe7f-ccdf-4997-96d2-27aa8cab0f38}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : ETcVnNormalizationType]]></Declaration>
      <Get Name="Get" Id="{d91719ff-9a73-4d4b-ab2b-a34a14168171}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := activeData;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8b882e07-b692-432d-9324-97d3bf3a0b75}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[activeData := Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>