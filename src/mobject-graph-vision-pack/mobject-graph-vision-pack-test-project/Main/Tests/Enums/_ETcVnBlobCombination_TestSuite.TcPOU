<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_ETcVnBlobCombination_TestSuite" Id="{62116342-6957-00ca-3579-87ca1f7b7988}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ETcVnBlobCombination_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{71008d1c-f008-0d53-17c9-3ef36c57821e}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{ffa635ef-3af9-0540-3255-34addb8cd53b}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
	target : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_SMALLEST;
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_SMALLEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := ETcVnBlobCombination.TCVN_BC_LARGEST;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value continued to follow target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{43f4f499-9b96-0ad9-3bd4-9498dbf7619b}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{31f3cdec-2206-0283-2282-4d107f26ca08}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : STRING := 'ETcVnBlobCombination';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{7b527f9c-c3b9-0319-3afd-43e41cebe1ce}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
	target : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_SMALLEST;
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_LARGEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := ETcVnBlobCombination.TCVN_BC_LARGEST;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{2f22bb92-33b4-03b5-26ee-323afe2d0ff6}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
	target : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_SMALLEST;
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_LARGEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := ETcVnBlobCombination.TCVN_BC_LARGEST;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{44a1db95-b430-0677-3958-f236aebaf51c}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"ENUM","identifier":"ETcVnBlobCombination","enumerations":["TCVN_BC_SMALLEST","TCVN_BC_LARGEST","TCVN_BC_MIN_THRESHOLD","TCVN_BC_MAX_THRESHOLD","TCVN_BC_MEDIAN_THRESHOLD"],"baseType":{"typeName":"DINT","minValue":-2147483648,"maxValue":2147483647,"isSigned":true,"isFloat":false}}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{9a22ce6c-0303-002d-3c7f-e2d7712e02b5}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    serializer : JsonSerializer;
    expected : STRING := '"TCVN_BC_SMALLEST"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{a72ad156-c9fc-02f3-217a-160996e8e587}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : UDINT := SIZEOF(ETcVnBlobCombination);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{933653c2-293e-0dd3-2d10-b988096a9cec}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TCVN_BC_SMALLEST"';
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_SMALLEST;
    actual : ETcVnBlobCombination;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{fe17a110-77ff-0102-2c23-b00a52f2ec91}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
	target : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_LARGEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := ETcVnBlobCombination.TCVN_BC_LARGEST;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{6558d75e-4053-0a83-21a2-dea4cd64a576}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
	target : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_LARGEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := ETcVnBlobCombination.TCVN_BC_LARGEST;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{45e9b890-c554-00de-196e-a600d9d49327}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : STRING := 'ENUM';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{d78da81a-cc2c-0a48-01f9-d82f2aa5cb4b}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_LARGEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := ETcVnBlobCombination.TCVN_BC_LARGEST;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{b249cc79-e4eb-0148-21c5-a1fd18cd480f}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _ETcVnBlobCombination(ETcVnBlobCombination.TCVN_BC_SMALLEST);
    expected : ETcVnBlobCombination := ETcVnBlobCombination.TCVN_BC_SMALLEST;
    actual : ETcVnBlobCombination;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>