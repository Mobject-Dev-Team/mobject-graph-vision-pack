<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Node_F_VN_LocateEdge" Id="{ff018d0b-d44f-058d-240e-0d3bf76dbc1a}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Node_F_VN_LocateEdge EXTENDS VisionNode
VAR
	ipSrcImage : _ITcVnImage;
    ipEdgePoints : _ITcVnContainer;
    aStartPoint : _TcVnPoint2_REAL;
    aEndPoint : _TcVnPoint2_REAL;
	eEdgeDirection : _ETcVnEdgeDirection(ETcVnEdgeDirection.TCVN_ED_DARK_TO_LIGHT);
    fMinStrength : _REAL(0.0);
    nSearchLines : _UDINT(0);
    hrPrev : _HRESULT(S_OK);
	hresult : _HRESULT(S_OK);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{af9ed3ae-e265-0023-06fc-21214b2ef83e}" />
    <Method Name="Clone" Id="{f1999d98-beef-0b47-2a94-bc5323fd78f2}">
      <Declaration><![CDATA[METHOD PUBLIC  Clone : I_Node
VAR
	pNode : POINTER TO Node_F_VN_LocateEdge;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(Node_F_VN_LocateEdge);
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8f00cbc9-6697-0a59-39fd-6866e16b67af}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddInput('ipSrcImage', ipSrcImage);
AddInput('aStartPoint', aStartPoint);
AddInput('aEndPoint', aEndPoint);
AddInput('hrPrev', hrPrev);
AddParameter('eEdgeDirection', eEdgeDirection);
AddParameter('fMinStrength', fMinStrength);
AddParameter('nSearchLines', nSearchLines);
AddOutput('ipEdgePoints', ipEdgePoints);
AddOutput('hresult',hresult);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{d38ab439-8c06-057b-012a-032c65a8a894}">
      <Declaration><![CDATA[METHOD PROTECTED  OnExecute : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hresult.Value := F_VN_LocateEdge(
	ipSrcImage := ipSrcImage.Value,
	ipEdgePoints := ipEdgePoints.Value,
    aStartPoint := aStartPoint.Value,
    aEndPoint := aEndPoint.Value,
    eEdgeDirection := eEdgeDirection.Value,
	fMinStrength := fMinStrength.Value,
	nSearchLines := nSearchLines.Value,
	hrPrev:= hrPrev.Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PreExecutionCheck" Id="{f8073879-c05e-08cc-247d-b52b1fb7b458}">
      <Declaration><![CDATA[METHOD PUBLIC PreExecutionCheck
VAR_INPUT
	Check : I_PreExecutionChecks;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Check.IsTrue(ipSrcImage.IsValid, 'ipSrcImage must contain an image');
Check.IsTrue(nSearchLines.IsOdd, 'nSearchLines must be an odd number');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>