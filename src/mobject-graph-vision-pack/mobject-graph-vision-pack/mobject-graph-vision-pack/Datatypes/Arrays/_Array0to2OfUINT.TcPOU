<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_Array0to2OfUINT" Id="{f1b74e7d-97c0-0904-328a-75a13343c827}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _Array0to2OfUINT EXTENDS ArrayDatatypeBase_1D
VAR CONSTANT
	lBound : DINT := 0;
	uBound : DINT := 2;
END_VAR
VAR
	localData : ARRAY [lBound..uBound] OF UINT;
	activeData : REFERENCE TO ARRAY [lBound..uBound] OF UINT REF= localData;
	elements : ARRAY [lBound..uBound] OF _UINT(0);
	baseType : _UINT(0);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{ea935a25-8d96-001d-0747-c57516fea3c6}">
      <Folder Name="Constructor" Id="{e42b3146-f57b-03d2-12e3-fac77ec5ac4f}" />
      <Folder Name="Protected" Id="{08ece97e-ee7a-0579-0f07-14f817476398}" />
    </Folder>
    <Folder Name="Customize" Id="{73d77c3d-b817-05d6-2d19-5fd1bb1fa245}" />
    <Property Name="Address" Id="{134ee6d7-82d3-0138-1cc8-b671bb1885dd}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{d320b697-c603-020c-0e7f-baa6e2a79203}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BaseDatatype" Id="{7585db60-9b53-097a-21d6-6b47aafb16fb}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC BaseDatatype : I_Datatype]]></Declaration>
      <Get Name="Get" Id="{6a590cea-d124-06a3-3f5e-c0544df8a31a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseDatatype := baseType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{5701b8eb-59b5-0adb-2fcb-eb1a65a65c0d}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{66ef9056-3742-04b9-182b-84c73128ce06}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _Array0to2OfUINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_Array0to2OfUINT());
pClone^.Value := Value;
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{b46a0779-e29a-0577-3966-449e86180f1d}" FolderPath="Core\Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{ab403e21-da9a-0af5-1535-6f704781b79a}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ARRAY [lBound..uBound] OF UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeArrayValues" Id="{2c05960c-ea60-09d4-21d8-15502a5d944c}" FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeArrayValues
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].SerializeWith(Serializer);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetElementReference" Id="{688426cf-5a35-0f4c-18ee-0f730880f4c3}" FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetElementReference
VAR_INPUT
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].MakeReferenceTo(activeData[i]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{c87d7231-a6f4-0f6a-223d-4d3d950ae920}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{9120669a-b03e-0036-1115-06091e558f62}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeArrayValues" Id="{203081c7-1c0e-0c93-3bd5-2ca9908314cb}" FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeArrayValues : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	enumerator : I_DeserializerArrayForwardEnumerator;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := Deserializer.GetArrayEnumerator();
i := lBound;

WHILE enumerator.MoveNext() AND i <= uBound DO
	
	IF NOT elements[i].TryDeserializeFrom(enumerator.Current, Feedback) THEN
		EXIT;
	END_IF
	i := i + 1;

END_WHILE
enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementAsDatatypeByIndex" Id="{413c4f49-a4e8-0921-3ba9-e3b800945559}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementAsDatatypeByIndex : BOOL
VAR_INPUT
	Index : DINT;
	Destination : REFERENCE TO I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < lbound OR Index > ubound THEN
	RETURN;
END_IF

Destination := elements[Index];
TryGetElementAsDatatypeByIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLowerBound" Id="{6a0b931b-0b69-0226-1ee1-118342fb8dcf}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetLowerBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := lBound;
	TryGetLowerBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUpperBound" Id="{7e8b9a4e-699c-0c9a-0abf-bd0d158e6b7b}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetUpperBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := uBound;
	TryGetUpperBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{e6a7600c-5f39-0956-3cdd-5a2ebe71c3db}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	targetAsArray : I_ArrayDatatype;
	pTargetData : POINTER TO ARRAY [lBound..uBound] OF UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Target.TryResolveAsArrayDatatype(targetAsArray) THEN
	RETURN;
END_IF

IF NOT (targetAsArray.Identifier = Identifier) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetElementReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{efc3052c-f7b2-0199-1224-8b9d4fd1a3ae}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ARRAY [lBound..uBound] OF UINT;]]></Declaration>
      <Get Name="Get" Id="{fad08a31-e875-01df-0ffd-23b2db71da06}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value ref= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>