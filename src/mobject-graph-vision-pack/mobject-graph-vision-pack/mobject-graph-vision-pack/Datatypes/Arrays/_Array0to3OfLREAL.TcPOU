<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_Array0to3OfLREAL" Id="{88ad166a-5397-07f4-22ee-a9d032ff2e42}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _Array0to3OfLREAL EXTENDS ArrayDatatypeBase_1D
VAR CONSTANT
	lBound : DINT := 0;
	uBound : DINT := 3;
END_VAR
VAR
	localData : ARRAY [lBound..uBound] OF LREAL;
	activeData : REFERENCE TO ARRAY [lBound..uBound] OF LREAL REF= localData;
	elements : ARRAY [lBound..uBound] OF _LREAL(0.0);
	baseType : _LREAL(0.0);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{afb54f62-f95e-045e-226d-bb433577f40f}">
      <Folder Name="Constructor" Id="{ce824819-8d4e-0629-2c12-6107143b0481}" />
      <Folder Name="Protected" Id="{35ea5ceb-597c-07c9-2535-365ce0c0b8a4}" />
    </Folder>
    <Folder Name="Customize" Id="{ee87abc0-c851-0395-2add-d49f3e4b5077}" />
    <Property Name="Address" Id="{f9bbb79d-769e-041c-1b44-198df74e3fd3}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{3152a8f7-7e09-04c3-3609-b18b61e44cd2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BaseDatatype" Id="{6c88b05d-5559-029d-37b7-3f43857c25b1}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC BaseDatatype : I_Datatype]]></Declaration>
      <Get Name="Get" Id="{a9882aea-71dc-03e2-3339-2372506451e8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseDatatype := baseType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{68fdebe8-d04e-0069-2fbe-0fe767de743c}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{079c774f-aaac-0fb4-32fe-d081d068b2e5}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _Array0to3OfLREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_Array0to3OfLREAL());
pClone^.Value := Value;
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8c42c296-d1c9-0134-34d5-c0fe456b37f9}"
      FolderPath="Core\Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{b2246a5e-2e90-037f-0e0e-171a759910d8}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ARRAY [lBound..uBound] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeArrayValues" Id="{d76b6b63-2d9a-041b-091a-6ff24a6fa04c}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeArrayValues
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].SerializeWith(Serializer);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetElementReference" Id="{633ad140-b069-0f1d-1bd8-7565135f6690}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetElementReference
VAR_INPUT
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].MakeReferenceTo(activeData[i]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{79494f9d-54f3-0e62-3fd8-4090d1222c61}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{24bd2c52-ea10-0200-2148-d8876abdeed8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeArrayValues" Id="{ec7f183f-8616-0b7d-339e-a9aa37837073}"
      FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeArrayValues : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	enumerator : I_DeserializerArrayForwardEnumerator;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := Deserializer.GetArrayEnumerator();
i := lBound;

WHILE enumerator.MoveNext() AND i <= uBound DO
	
	IF NOT elements[i].TryDeserializeFrom(enumerator.Current, Feedback) THEN
		EXIT;
	END_IF
	i := i + 1;

END_WHILE
enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementAsDatatypeByIndex" Id="{ae29f631-1213-0839-2430-2edd8a93a51b}"
      FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementAsDatatypeByIndex : BOOL
VAR_INPUT
	Index : DINT;
	Destination : REFERENCE TO I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < lbound OR Index > ubound THEN
	RETURN;
END_IF

Destination := elements[Index];
TryGetElementAsDatatypeByIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLowerBound" Id="{26e76337-a59e-03f4-0609-b9fea57b9347}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetLowerBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := lBound;
	TryGetLowerBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUpperBound" Id="{cfea7a17-2859-0729-00b1-ba8ae4d5d38d}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetUpperBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := uBound;
	TryGetUpperBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{e8809a01-c70d-03fa-13d2-d2b40ef633b7}"
      FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO ARRAY [lBound..uBound] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetElementReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{048d3ffa-fe89-077a-2778-756342378518}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ARRAY [lBound..uBound] OF LREAL;]]></Declaration>
      <Get Name="Get" Id="{14d5e013-452e-0432-12fe-9f722e04cb9d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value ref= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>